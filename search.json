[{"title":"Hello World","url":"/posts/201805/16107.html","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"语雀","url":"/posts/201909/26161.html","content":"<p>日常记录转至语雀平台，定期整理再更新至博客。</p>\n"},{"title":"JavaScript 数据可视化","url":"/posts/201809/11085.html","content":"<h2 id=\"D3js\"><a href=\"#D3js\" class=\"headerlink\" title=\"D3js\"></a>D3js</h2><p>前端可视化领域当之无愧的 No.1，提供的 API 相对基础，相对灵活度最好，适合完成定制化有较高要求的图形。</p>\n<p>网上的参考资料很多，摘录两个：</p>\n<ul>\n<li><a href=\"https://d3js.org/\">D3js 官网</a></li>\n<li><a href=\"https://github.com/wbkd/awesome-d3\">Awesome D3</a></li>\n</ul>\n<p>封装 D3js，以提供更易用的 API 的库也很多：</p>\n<ul>\n<li><a href=\"https://github.com/hshoff/vx/\">vx - 基于 React 封装</a></li>\n<li><a href=\"http://c3js.org/\">C3js</a></li>\n<li><a href=\"https://github.com/FormidableLabs/victory\">victory</a></li>\n<li><a href=\"https://github.com/vega/vega\">vega</a></li>\n<li><a href=\"https://github.com/novus/nvd3\">nvd3</a></li>\n<li><a href=\"http://recharts.org/zh-CN\">ReCharts</a></li>\n</ul>\n<p>期中 Recharts 是基于 React 的组合式图表，有<a href=\"http://recharts.org/zh-CN\">官方中文文档</a>。<br>设计比较简约，可满足一般数据可视化需要。</p>\n<h2 id=\"Chart-js\"><a href=\"#Chart-js\" class=\"headerlink\" title=\"Chart.js\"></a>Chart.js</h2><p>官方介绍：</p>\n<pre><code>为设计和开发人员准备的简单、灵活的 JavaScript 图表工具\n</code></pre>\n<p>相比其他可视化库，其使用可能最为简单、轻量。目前<a href=\"http://chartjs.cn/\">中文文档</a>翻译完成度较低。</p>\n<h2 id=\"Echarts\"><a href=\"#Echarts\" class=\"headerlink\" title=\"Echarts\"></a>Echarts</h2><p>基于 React 封装库有 <a href=\"https://github.com/hustcc/echarts-for-react\">echarts-for-react</a>，其只是体统了一个简单的封装组件，使用中仍按照 Echarts 的 API 来完成数据可视化。</p>\n<p>基于 Vue2.x 封装的有 <a href=\"https://v-charts.js.org/\">v-charts</a>，其封装度更高。</p>\n<h2 id=\"AntV\"><a href=\"#AntV\" class=\"headerlink\" title=\"AntV\"></a>AntV</h2><p>蚂蚁金服开源的数据可视化解决方案，包含：</p>\n<ul>\n<li>G2: 一般的数据可视化</li>\n<li> G6: 关系数据可视化</li>\n<li> F2: 专注移动端的数据可视化解决方案</li>\n</ul>\n<p>一般我们用到最多的是 <code>AntV/G2</code>，相比 Echarts 算是后起之秀，官方介绍为：</p>\n<pre><code>G2 是一套基于可视化编码的图形语法，以数据驱动，具有高度的易用性和扩展性，用户无需关注各种繁琐的实现细节，一条语句即可构建出各种各样的可交互的统计图表。\n</code></pre>\n<p>与 Echarts 相比，因为其封装了一些细节，使用上可能相对简单，但是没有 Echarts 那么高的可定制度，相对图形做细微定制化调整，按照官方的 API 可能让人摸不着头脑。而自 Echarts V4 版本，也加入了 <code>数据集(dataset)</code> 等功能，减少了代码繁琐度，相比来说可能 Echarts 更好用一些。就系统化解决方案来说，因 <code>AntV</code> 包含各端以及覆盖 <code>React</code>、<code>Vue</code>、<code>Angular</code> 的官方封装，会更胜一筹。就主题配色来啊，个人感觉 <code>AntV</code> 提供的默认主题更好看一点，若你是颜控，不妨试试 <code>AntV/G2</code>。</p>\n<p><code>G2</code> 和 <code>G6</code> 有基于其的 React 封装库：</p>\n<ul>\n<li><a href=\"http://bizcharts.net/\">BizCharts</a>: 一个基于 G2 封装的 React 图表库，具有 G2、React 的全部优点，可以让用户以组件的形式组合出无数种图表；并且集成了大量的统计工具，支持多种坐标系绘制，交互定制，动画定制以及图形定制等等。</li>\n<li><a href=\"http://bizcharts.net/products/bizGoblin\">BizGoblin</a>: 一个基于 F2 封装的 React 图表库，具有 F2、React 的全部优点，可以让用户以组件的形式组合出无数种移动端图表。</li>\n</ul>\n<p>不过如果不研究 <code>G2</code> 文档，直接上手 <code>BizCharts</code> 是个大坑……</p>\n<h2 id=\"Highcharts\"><a href=\"#Highcharts\" class=\"headerlink\" title=\"Highcharts\"></a>Highcharts</h2><p>另一个比较流行的数据可视化框架，有<a href=\"https://www.hcharts.cn/\">中文文档</a>，网上和 Echarts 对比的文章较多，可自行查阅。有些方面比 Echarts 更强大易用。不过其<a href=\"https://highcharts.com.cn/highcharts\">商用授权费</a>用大部分国内公司会望而却步，单个开发者授权为 <code>7900元</code>。</p>\n","categories":["可视化"],"tags":["可视化","JavaScript"]},{"title":"mobx 总结","url":"/posts/201812/38865.html","content":"<p><a href=\"https://github.com/mobxjs/mobx-react/issues/256\">Question: How to get typesafe injection</a><br><a href=\"https://github.com/mobxjs/mobx-react/issues/553\">Question: Why should I use inject decorator?</a><br><a href=\"https://github.com/mobxjs/mobx-react/issues/410\">issue: deprecate <code>inject</code> and <code>Provider</code></a><br><a href=\"https://github.com/mobxjs/mobx-react/issues/315\">Problem Unit Testing a Parent Component whose Child Inject a Store</a></p>\n","categories":["JavaScript"],"tags":["JavaScript","mobx"]},{"title":"tslint 拾遗","url":"/posts/201809/17219.html","content":"<p>禁止某行的 tslint 检查（<a href=\"https://palantir.github.io/tslint/usage/rule-flags/\">Comment flags in source code</a>）：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">someCode</span>(); <span class=\"comment\">// tslint:disable-line</span></span><br></pre></td></tr></tbody></table></figure>\n","categories":["typescript"],"tags":["tslint","typescript"]},{"title":"typescript 配置小计","url":"/posts/201808/35898.html","content":"<h2 id=\"tsconfig-json-配置\"><a href=\"#tsconfig-json-配置\" class=\"headerlink\" title=\"tsconfig.json 配置\"></a>tsconfig.json 配置</h2><p>下面对 <code>tsconfig.json</code> 配置文件中常用配置做相关说明</p>\n<p>若想使用下面语法导入 <code>React</code></p>\n<figure class=\"highlight ts\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, { <span class=\"title class_\">Component</span> } <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>而不是使用</p>\n<figure class=\"highlight ts\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>需要在 <code>tsconfig.json</code> 配置文件中添加：</p>\n<figure class=\"highlight json\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">{</span></span><br><span class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">{</span></span><br><span class=\"line\">    <span class=\"attr\">\"allowSyntheticDefaultImports\"</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">}</span></span><br><span class=\"line\"><span class=\"punctuation\">}</span></span><br></pre></td></tr></tbody></table></figure>\n\n\n<h2 id=\"tslint-json-配置\"><a href=\"#tslint-json-配置\" class=\"headerlink\" title=\"tslint.json 配置\"></a>tslint.json 配置</h2><p>允许成员函数不加 <code>public</code> 说明：</p>\n<figure class=\"highlight json\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">{</span></span><br><span class=\"line\">  <span class=\"attr\">\"rules\"</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">{</span></span><br><span class=\"line\">    <span class=\"attr\">\"member-access\"</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"string\">\"no-public\"</span><span class=\"punctuation\">]</span> <span class=\"comment\">// Or false. Read the rule and see what you want.</span></span><br><span class=\"line\">  <span class=\"punctuation\">}</span></span><br><span class=\"line\"><span class=\"punctuation\">}</span></span><br></pre></td></tr></tbody></table></figure>"},{"title":"关于 JavaScript 闭包的简单例子","url":"/posts/201807/25528.html","content":"<p>于控制台中运行如下例子：</p>\n<h2 id=\"例-①：无闭包\"><a href=\"#例-①：无闭包\" class=\"headerlink\" title=\"例 ①：无闭包\"></a>例 ①：无闭包</h2><figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) {</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    x[i] = i;</span><br><span class=\"line\">  }, <span class=\"number\">1000</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// ▶(10)&nbsp;[empty × 9, 9]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"例-②：闭包\"><a href=\"#例-②：闭包\" class=\"headerlink\" title=\"例 ②：闭包\"></a>例 ②：闭包</h2><figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> y = [];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doSetTimeout</span>(<span class=\"params\">i</span>) {</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    y[i] = i;</span><br><span class=\"line\">  }, <span class=\"number\">1000</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) {</span><br><span class=\"line\">  <span class=\"title function_\">doSetTimeout</span>(i);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(y); <span class=\"comment\">// ▶(9)&nbsp;[0, 1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<span id=\"more\"></span>\n\n<p>注意上述两个例子中，</p>\n<ul>\n<li>例 ① 中，<code>x = [empty × 9, 9]</code>，<code>length</code> 为 <code>10</code>；</li>\n<li>例 ② 中，<code>y = [0, 1, 2, 3, 4, 5, 6, 7, 8]</code>，<code>length</code> 为 <code>9</code>。<br>因为循环体是 <code>i++</code>，循环结束 <code>i = 9</code>。<br>我们把 <code>setTimeout</code> 等待时间改为 <code>0</code>，再看结果：</li>\n</ul>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> y = [];</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doSetTimeout</span>(<span class=\"params\">i</span>) {</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    y[i] = i;</span><br><span class=\"line\">  }, <span class=\"number\">0</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) {</span><br><span class=\"line\">  <span class=\"title function_\">doSetTimeout</span>(i);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(y); <span class=\"comment\">// ▶(9)&nbsp;[0, 1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h2><figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> z = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) {</span><br><span class=\"line\">  (<span class=\"keyword\">function</span>(<span class=\"params\">i</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">      z[i] = i;</span><br><span class=\"line\">    }, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  })(i);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(z);</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"引申\"><a href=\"#引申\" class=\"headerlink\" title=\"引申\"></a>引申</h2><p>注意，如果我们将上面的例子改为：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> z = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) {</span><br><span class=\"line\">  (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">      z[i] = i;</span><br><span class=\"line\">    }, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  })();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(z); <span class=\"comment\">// ▶(10)&nbsp;[empty × 9, 9]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>我们看输出结果是什么，注意函数体中的 <code>i</code> 是函数体内部专有的还是引用的全局变量？<br>然后，我们进一步修改上述代码，看看结果又会是否达到预期：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> z = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) {</span><br><span class=\"line\">  (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j = i;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">      z[j] = j;</span><br><span class=\"line\">    }, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  })();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(z);</span><br></pre></td></tr></tbody></table></figure>\n","categories":["JavaScript"],"tags":["JavaScript","闭包"]},{"title":"bash 快捷命令","url":"/posts/201807/1738.html","content":"<h2 id=\"历史记录相关快捷命令\"><a href=\"#历史记录相关快捷命令\" class=\"headerlink\" title=\"历史记录相关快捷命令\"></a>历史记录相关快捷命令</h2><p>参见：<code>man history</code>。下面节选一部分：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>!!</code></td>\n<td>执行上一条命令</td>\n</tr>\n<tr>\n<td><code>!foo</code></td>\n<td>执行以 <code>foo</code> 开头的命令</td>\n</tr>\n<tr>\n<td><code>!?foo</code></td>\n<td>执行包含 <code>foo</code> 的命令</td>\n</tr>\n<tr>\n<td><code>!n</code></td>\n<td>执行第 n 条命令</td>\n</tr>\n<tr>\n<td><code>!-n</code></td>\n<td>执行倒数第 n 条命令</td>\n</tr>\n<tr>\n<td><code>!$</code></td>\n<td>上一条命令最后一个参数</td>\n</tr>\n<tr>\n<td><code>!^</code></td>\n<td>上一条命令第一个参数</td>\n</tr>\n<tr>\n<td><code>!:n</code></td>\n<td>上一条命令第 n 个参数</td>\n</tr>\n<tr>\n<td><code>!:x-y</code></td>\n<td>上一条命令从 x 到 y 的参数</td>\n</tr>\n<tr>\n<td><code>!:n*</code></td>\n<td>上一条命令从 n 开始到最后的参数</td>\n</tr>\n<tr>\n<td><code>!*</code></td>\n<td>上一条命令的所有参数</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://talk.linuxtoy.org/cli-tips/#1\">高效使用命令行</a></li>\n<li><a href=\"https://www.zhihu.com/question/59227720\">有哪些命令行的软件堪称神器？</a></li>\n</ul>\n","categories":["Linux"],"tags":["Linux","bash"]},{"title":"oh-my-zsh 配置","url":"/posts/201807/55474.html","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>参见 <a href=\"https://ohmyz.sh/\">oh-my-zsh 官网</a><br>首先安装 <code>zsh</code></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">apt install zsh</span><br></pre></td></tr></tbody></table></figure>\n<p>下载并安装： </p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ sh -c <span class=\"string\">\"<span class=\"subst\">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ sh -c <span class=\"string\">\"<span class=\"subst\">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>\"</span></span><br></pre></td></tr></tbody></table></figure>\n<p>注意：安装完成后，以后对 <code>~/.bashrc</code> 的配置要放到 <code>~./zshrc</code> 中进行。</p>\n<p>若想卸载，可直接运行 <code>uninstall_oh_my_zsh</code>。</p>\n<h2 id=\"配置主题\"><a href=\"#配置主题\" class=\"headerlink\" title=\"配置主题\"></a>配置主题</h2><p>打开配置文件</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">nano ~./zshrc</span><br></pre></td></tr></tbody></table></figure>\n\n<p>修改 <code>ZSH_THEME=</code> 行：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">ZSH_THEME=\"ys\"</span><br></pre></td></tr></tbody></table></figure>\n\n<p>更多主题介绍，参见：<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\">Themes</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h2><p><a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins\">Plugins</a><br>使用如下命令，查看已安装（默认只启用 <code>git</code> 插件）的插件：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">ls ~/.oh-my-zsh/plugins</span><br></pre></td></tr></tbody></table></figure>\n\n<p>安装插件很简单，只有添加相应的插件名，并用换行或者空格隔开不同插件名称。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">plugins=(</span><br><span class=\"line\">  git</span><br><span class=\"line\">  z</span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"z\"><a href=\"#z\" class=\"headerlink\" title=\"z\"></a>z</h3><p>使用 cd 命令浏览你常用的目录。<code>z</code> 会监视哪些是你经常和最近访问的，并建立一个加权的路径列表。</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> z foo</td>\n<td><code>cd</code> 到最匹配 foo 的路径</td>\n</tr>\n<tr>\n<td> z foo bar</td>\n<td><code>cd</code> 到最匹配 foo 和 bar 的路径</td>\n</tr>\n<tr>\n<td> z -r foo</td>\n<td><code>cd</code> 到匹配 foo 的 dir 中排名最高的路径</td>\n</tr>\n<tr>\n<td> z -t foo</td>\n<td><code>cd</code> 到匹配 foo 的 dir 中最近访问的路径</td>\n</tr>\n<tr>\n<td> z -l foo</td>\n<td> 列出所有匹配 foo 的 dir</td>\n</tr>\n<tr>\n<td> 更多请查看<a href=\"https://github.com/rupa/z\">官网文档</a></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"extract\"><a href=\"#extract\" class=\"headerlink\" title=\"extract\"></a>extract</h3><p>项目文档：<a href=\"https://github.com/xvoland/Extract\">extract</a></p>\n<p>支持的解压或提取格式：</p>\n<pre><code>.zip, .rar, .bz2, .gz, .tar, .tbz2, .tgz, .Z, .7z, .xz, .exe, .tar.bz2, .tar.gz, .tar.xz, .arj, .cab, .chm, .deb, .dmg, .iso, .lzh, .msi, .rpm, .udf, .wim, .xar .cpio\n</code></pre>\n<p>使用方法很简单</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">extract &lt;archive_filename.extention&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">extract &lt;archive_filename_1.extention&gt; &lt;archive_filename_2.extention&gt; &lt;archive_filename_3.extention&gt; ...</span></span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><p>查看历史输入所有命令。用法：在终端输入 <code>h</code> 即可。</p>\n<h3 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h3><p>实时补全文件名</p>\n<h3 id=\"zsh-autosuggestions\"><a href=\"#zsh-autosuggestions\" class=\"headerlink\" title=\"zsh-autosuggestions\"></a>zsh-autosuggestions</h3><p>根据历史输入指令的记录即时的提示。<br>安装：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</span><br></pre></td></tr></tbody></table></figure>\n<p>配置，编辑 <code>~/.zshrc</code> 文件：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">plugins=(zsh-autosuggestions)</span><br></pre></td></tr></tbody></table></figure>\n<p>配置生效：<code>source ~/.zshrc</code>。</p>\n<h3 id=\"zsh-syntax-highlighting\"><a href=\"#zsh-syntax-highlighting\" class=\"headerlink\" title=\"zsh-syntax-highlighting\"></a>zsh-syntax-highlighting</h3><p>命令高亮。<a href=\"https://github.com/zsh-users/zsh-syntax-highlighting\">文档</a></p>\n<h3 id=\"zsh-incremental\"><a href=\"#zsh-incremental\" class=\"headerlink\" title=\"zsh-incremental\"></a>zsh-incremental</h3><p>实时补全路径。<a href=\"http://mimosa-pudica.net/zsh-incremental.html\">说明</a></p>\n<p>参考资料：<br><a href=\"https://jyzhangchn.github.io/oh-my-zsh-diy.html\">oh-my-zsh 插件介绍</a></p>\n","categories":["Linux"],"tags":["Linux","shell"]},{"title":"使用 acme.sh 申请 Let's Encrypt 通配符 HTTTPS 证书","url":"/posts/201806/46579.html","content":"<h2 id=\"安装证书\"><a href=\"#安装证书\" class=\"headerlink\" title=\"安装证书\"></a>安装证书</h2><h3 id=\"安装脚本\"><a href=\"#安装脚本\" class=\"headerlink\" title=\"安装脚本\"></a>安装脚本</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 sh 脚本</span></span><br><span class=\"line\">curl https://get.acme.sh | sh</span><br></pre></td></tr></tbody></table></figure>\n\n<p>重载配置</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果用的 zsh 用：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>\n\n<p>以下都是以 <code>zsh</code> 为例：</p>\n<span id=\"more\"></span>\n\n<h2 id=\"域名验证\"><a href=\"#域名验证\" class=\"headerlink\" title=\"域名验证\"></a>域名验证</h2><p>为了验证域名所有权，Let’s Encrypt 支持两种方式来验证：</p>\n<ol>\n<li>域名的 DNS: 配置一个随机的 TXT 记录来验证</li>\n<li>域名的访问：配置一个随机的 URL 地址来验证</li>\n</ol>\n<p>这里推荐使用 DNS 验证方式。</p>\n<p>以阿里云为例，首先在</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">访问控制 &gt; 阿里云子账户 &gt; 用户管理</span><br></pre></td></tr></tbody></table></figure>\n\n<p>中添加用户，给此授予 <code>DNS 管理权限</code>（可以在界面中输入 <code>DNS</code> 搜索相关权限）<br>然后创建 <code>AccessKey</code>，生成 <code>AccessKeyId</code> 和 <code>AccessKeySecret</code>，保存待用</p>\n<p>在 <code>.zshrc</code> 中添加：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> Ali_Key=<span class=\"string\">\"AccessKeyId\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> Ali_Secret=<span class=\"string\">\"AccessKeySecret\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>然后</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"颁发证书\"><a href=\"#颁发证书\" class=\"headerlink\" title=\"颁发证书\"></a>颁发证书</h2><h3 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h3><p>可以对单域名、多域名、泛域名进行颁发</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --issue --dns dns_ali -d <span class=\"string\">'mapledu.cn'</span> -d <span class=\"string\">'*.mapledu.cn'</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>这里会进行域名的 DNS 验证，中间会等待 120 秒来验证正确性，验证成功后会有成功标记。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[Mon May 21 19:41:35 CST 2018] Registering account</span><br><span class=\"line\">[Mon May 21 19:41:37 CST 2018] Registered</span><br><span class=\"line\">[Mon May 21 19:41:37 CST 2018] ACCOUNT_THUMBPRINT='jPaF9_SSQDKyCMyRoc9NqS3avPthoH&lt;******&gt;-&lt;******&gt;'</span><br><span class=\"line\">[Mon May 21 19:41:37 CST 2018] Creating domain key</span><br><span class=\"line\">[Mon May 21 19:41:37 CST 2018] The domain key is here: /root/.acme.sh/mapledu.cn/mapledu.cn.key</span><br><span class=\"line\">[Mon May 21 19:41:37 CST 2018] Multi domain='DNS:mapledu.cn,DNS:*.mapledu.cn'</span><br><span class=\"line\">[Mon May 21 19:41:37 CST 2018] Getting domain auth token for each domain</span><br><span class=\"line\">[Mon May 21 19:41:39 CST 2018] Getting webroot for domain='mapledu.cn'</span><br><span class=\"line\">[Mon May 21 19:41:39 CST 2018] Getting webroot for domain='*.mapledu.cn'</span><br><span class=\"line\">[Mon May 21 19:41:39 CST 2018] Found domain api file: /root/.acme.sh/dnsapi/dns_ali.sh</span><br><span class=\"line\">[Mon May 21 19:41:41 CST 2018] Found domain api file: /root/.acme.sh/dnsapi/dns_ali.sh</span><br><span class=\"line\">[Mon May 21 19:41:43 CST 2018] Sleep 120 seconds for the txt records to take effect</span><br><span class=\"line\">[Mon May 21 19:43:45 CST 2018] Verifying:mapledu.cn</span><br><span class=\"line\">[Mon May 21 19:43:48 CST 2018] Pending</span><br><span class=\"line\">[Mon May 21 19:43:50 CST 2018] Success</span><br><span class=\"line\">[Mon May 21 19:43:50 CST 2018] Verifying:*.mapledu.cn</span><br><span class=\"line\">[Mon May 21 19:43:54 CST 2018] Success</span><br><span class=\"line\">[Mon May 21 19:43:54 CST 2018] Removing DNS records.</span><br><span class=\"line\">[Mon May 21 19:43:59 CST 2018] Verify finished, start to sign.</span><br><span class=\"line\">[Mon May 21 19:44:01 CST 2018] Cert success.</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">&lt;此时省略证书内容&gt;</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">[Mon May 21 19:44:01 CST 2018] Your cert is in  /root/.acme.sh/mapledu.cn/mapledu.cn.cer</span><br><span class=\"line\">[Mon May 21 19:44:01 CST 2018] Your cert key is in  /root/.acme.sh/mapledu.cn/mapledu.cn.key</span><br><span class=\"line\">[Mon May 21 19:44:01 CST 2018] The intermediate CA cert is in  /root/.acme.sh/mapledu.cn/ca.cer</span><br><span class=\"line\">[Mon May 21 19:44:01 CST 2018] And the full chain certs is there:  /root/.acme.sh/mapledu.cn/fullchain.cer</span><br></pre></td></tr></tbody></table></figure>\n\n<p>该命令执行后，会在计划表里添加计划。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">crontab -l</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"复制证书\"><a href=\"#复制证书\" class=\"headerlink\" title=\"复制证书\"></a>复制证书</h3><p>前面证书生成以后，接下来需要把证书 copy 到真正需要用它的地方.</p>\n<p>注意，默认生成的证书都放在安装目录下: ~/.acme.sh/, 请不要直接使用此目录下的文件，<br>例如：不要直接让 nginx/apache 的配置文件使用这下面的文件。这里面的文件都是内部使用，<br>而且目录结构可能会变化.</p>\n<p>正确的使用方法是使用 –installcert 命令，并指定目标位置，然后证书文件会被 copy 到相应的位置：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --installcert -d <span class=\"string\">\"mapledu.cn\"</span> -d <span class=\"string\">\"*.mapledu.cn\"</span> \\</span><br><span class=\"line\">    --cert-file /etc/nginx/cert.d/mapledu.cn/mapledu.cn.cer\\</span><br><span class=\"line\">    --key-file /etc/nginx/cert.d/mapledu.cn/mapledu.cn.key\\</span><br><span class=\"line\">    --ca-file /etc/nginx/cert.d/mapledu.cn/ca.cer\\</span><br><span class=\"line\">    --fullchain-file /etc/nginx/cert.d/mapledu.cn/fullchain.cer\\</span><br><span class=\"line\">    --reloadcmd <span class=\"string\">\"service nginx force-reload\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"nginx-配置\"><a href=\"#nginx-配置\" class=\"headerlink\" title=\"nginx 配置\"></a>nginx 配置</h3><p>nginx 配置是注意配置的是 <code>key-file</code> 和 <code>fullchain-file</code> 文件：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">ssl_certificate   /etc/nginx/cert.d/mapledu.cn/fullchain.cer;</span><br><span class=\"line\">ssl_certificate_key  /etc/nginx/cert.d/mapledu.cn/mapledu.cn.key;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>特别是 <code>ssl_certificate</code> 项，应该配置生成的 <code>fullchain.cer</code>，而不是 <code>mapledu.cn.cer</code>。否则在微信小程序 https 证书验证中会出错。</p>\n<h2 id=\"通用脚本\"><a href=\"#通用脚本\" class=\"headerlink\" title=\"通用脚本\"></a>通用脚本</h2><p>也可以将颁发证书和安装证书两个命令合到一块，通用脚本如下：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">domain=<span class=\"string\">\"mapledu.cn\"</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /etc/nginx/cert.d/<span class=\"variable\">$domain</span></span><br><span class=\"line\">acme.sh -d <span class=\"string\">\"<span class=\"variable\">$domain</span>\"</span> -d <span class=\"string\">\"*.<span class=\"variable\">$domain</span>\"</span> \\</span><br><span class=\"line\">    --issue --dns dns_ali \\</span><br><span class=\"line\">    --installcert \\</span><br><span class=\"line\">    --cert-file /etc/nginx/cert.d/<span class=\"variable\">$domain</span>/<span class=\"variable\">$domain</span>.cer\\</span><br><span class=\"line\">    --key-file /etc/nginx/cert.d/<span class=\"variable\">$domain</span>/<span class=\"variable\">$domain</span>.key\\</span><br><span class=\"line\">    --ca-file /etc/nginx/cert.d/<span class=\"variable\">$domain</span>/ca.cer\\</span><br><span class=\"line\">    --fullchain-file /etc/nginx/cert.d/<span class=\"variable\">$domain</span>/fullchain.cer\\</span><br><span class=\"line\">    --reloadcmd <span class=\"string\">\"service nginx force-reload\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"更新-acme-sh\"><a href=\"#更新-acme-sh\" class=\"headerlink\" title=\"更新 acme.sh\"></a>更新 acme.sh</h2><p>目前由于 acme 协议和 letsencrypt CA 都在频繁的更新，因此 acme.sh 也经常更新以保持同步.</p>\n<p>升级 acme.sh 到最新版 :</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --upgrade</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果你不想手动升级，可以开启自动升级:</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">acme.sh  --upgrade  --auto-upgrade</span><br></pre></td></tr></tbody></table></figure>\n\n<p>之后，acme.sh 就会自动保持更新了.</p>\n<p>你也可以随时关闭自动更新:</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">acme.sh --upgrade  --auto-upgrade  0</span><br></pre></td></tr></tbody></table></figure>\n\n<p>参考：</p>\n<ol>\n<li><a href=\"https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E\">acme.sh 官方文档</a></li>\n<li><a href=\"http://frontenddev.org/article/use-acme-sh-deployment-let-s-encrypt-by-ali-cloud-dns-generic-domain-https-authentication.html\">使用 acme.sh 部署 Let’s Encrypt 通过阿里云 DNS 验证方式实现泛域名 HTTPS</a></li>\n<li><a href=\"https://blog.neroxps.cn/2018/03/17/acme/\">利用 acme.sh 申请 Letsencrypt 免费 SSL 证书</a></li>\n</ol>\n","categories":["后端"],"tags":["部署","HTTPS","证书"]},{"title":"好用的命令行软件","url":"/posts/201807/11156.html","content":"<p><a href=\"https://github.com/nvbn/thefuck\">thefuck</a></p>\n<p>纠正在控制台中你输入的错误命令。</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">pip install thefuck</span></span><br></pre></td></tr></tbody></table></figure>\n\n<span id=\"more\"></span>\n\n<p><a href=\"https://github.com/chrisallenlane/cheat\">cheat</a></p>\n<p>允许您在命令行上创建和查看交互式备忘单。 它旨在帮助 * nix 系统管理员提醒他们经常使用的命令的选项，但不经常记住。<br>安装：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">pip install cheat</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">cheat tar</span></span><br><span class=\"line\"> To extract an uncompressed archive:</span><br><span class=\"line\">tar -xvf /path/to/foo.tar</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">To create an uncompressed archive:</span></span><br><span class=\"line\">tar -cvf /path/to/foo.tar /path/to/foo/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">To extract a .gz archive:</span></span><br><span class=\"line\">tar -xzvf /path/to/foo.tgz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">To create a .gz archive:</span></span><br><span class=\"line\">tar -czvf /path/to/foo.tgz /path/to/foo/</span><br><span class=\"line\">... ...</span><br></pre></td></tr></tbody></table></figure>\n","categories":["Linux"],"tags":["Linux","bash"]},{"title":"阿里云 ECS Ubuntu 配置","url":"/posts/201807/8642.html","content":"<p>环境：Ubuntu 18.04</p>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><p>参见：</p>\n<h3 id=\"PostgreSQL\"><a href=\"#PostgreSQL\" class=\"headerlink\" title=\"PostgreSQL\"></a>PostgreSQL</h3><p>创建 <code>pgdg.list</code> 编辑配置文件：</p>\n<pre><code>/etc/apt/sources.list.d/pgdg.list\n</code></pre>\n<p>添加如下内容：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main</span><br></pre></td></tr></tbody></table></figure>\n\n<p>导入存储库签名密钥，并更新包列表：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></tbody></table></figure>\n\n<p>安装：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">apt-get install postgresql-10</span><br></pre></td></tr></tbody></table></figure>\n\n<p>参见：<a href=\"https://www.postgresql.org/download/linux/ubuntu/\">LINUX DOWNLOADS (UBUNTU)</a></p>\n<h3 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h3><p>不用其他复杂配置，直接运行，即可安装最新稳定版：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install nginx</span><br></pre></td></tr></tbody></table></figure>\n","categories":["Linux"],"tags":["Linux","服务器"]},{"title":"Flask-SQLAlchemy 调试","url":"/posts/201810/10329.html","content":"<p>在使用 Flask-SQLAlchemy 时，如果想调试相关代码，一般和调试 Flask 调试一样，运行</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">flask shell</span><br></pre></td></tr></tbody></table></figure>\n<p>进入 Shell 环境进行。<br>注意，原生运行此命令，Shell 环境为默认的 Python 环境，没有 IPython 提供的代码高亮和代码提示。<br>此时安装 <code>flask-shell-ipython</code> 插件可以解决此问题。</p>\n<p>如果不想使用上述插件，我们可以创造一个应用上下文环境，即控制台运行 <code>ipython</code>，进入 IPython 环境，在其中运行代码：</p>\n<figure class=\"highlight py\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> manage <span class=\"keyword\">import</span> app, db</span><br><span class=\"line\">ctx = app.app_context()</span><br><span class=\"line\">ctx.push()</span><br></pre></td></tr></tbody></table></figure>\n<p>这样既创造了一个应用上下文环境。下面我们就可以正常完成数据库的增删查改操作。</p>\n<p>如果使用 PyCharm 编辑器，其提供的 <code>Python Console</code> 提供了查看当前变量值等功能更加的方便，同理可以在其中运行上述代码。<br>每次运行上述代码嫌麻烦，PyCharm 提供了 <code>Starting script</code> 功能，具体操作如下：</p>\n<pre><code>Setting &gt; Build, Execution, Deployment &gt; Console &gt; Python Console &gt; Starting script\n</code></pre>\n<p>然后将上述代码，添加到其中，每次运行 <code>Python Console</code> 就能自动加载上述代码。</p>\n","categories":["Flask"],"tags":["Flask"]},{"title":"MongoEngine 查询","url":"/posts/201807/62733.html","content":"<h2 id=\"数据库查询\"><a href=\"#数据库查询\" class=\"headerlink\" title=\"数据库查询\"></a>数据库查询</h2><p><code>Document</code> 对象有一个 <code>objects</code> 属性，用来访问在数据库中跟这个类有关的对象。这个 <code>objects</code> 属性其实是一个 <code>QuerySetManager</code> ，它会创建和返回一个新的 <code>QuerySet</code> 对象的访问。这个 <code>QuerySet</code> 对象可以从数据库中遍历获取的文档：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Prints out the names of all the users in the database</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> user <span class=\"keyword\">in</span> User.objects:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> user.name</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"过滤查询\"><a href=\"#过滤查询\" class=\"headerlink\" title=\"过滤查询\"></a>过滤查询</h3><p>可以通过调用 <code>QuerySet</code> 对象的关键字参数来对数据查询进行过滤，关键字查询中的键和你想要查询的 <code>Document</code> 中的字段一致：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This will return a QuerySet that will only iterate over users whose</span></span><br><span class=\"line\"><span class=\"comment\"># 'country' field is set to 'uk'</span></span><br><span class=\"line\">uk_users = User.objects(country=<span class=\"string\">'uk'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>对于内嵌 document 的字段可以使用 <code>__</code> 来代替对象属性访问语法中的 <code>.</code> 进行访问：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This will return a QuerySet that will only iterate over pages that have</span></span><br><span class=\"line\"><span class=\"comment\"># been written by a user whose 'country' field is set to 'uk'</span></span><br><span class=\"line\">uk_pages = Page.objects(author__country=<span class=\"string\">'uk'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"查询操作符\"><a href=\"#查询操作符\" class=\"headerlink\" title=\"查询操作符\"></a>查询操作符</h3><p>在查询中也可以使用操作符，只要将其加在关键字的双下划线之后即可：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Only find users whose age is 18 or less</span></span><br><span class=\"line\">young_users = Users.objects(age__lte=<span class=\"number\">18</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>可用的运算符如下：</p>\n<ul>\n<li><code>ne</code>&nbsp;– 不等于<code>≠</code></li>\n<li><code>lt</code>&nbsp;– 小于 <code>&lt;</code></li>\n<li><code>lte</code>&nbsp;– 小于等于<code>≤</code></li>\n<li><code>gt</code>&nbsp;– 大于 <code>&gt;</code></li>\n<li><code>gte</code>&nbsp;– 大于等于 <code>≥</code></li>\n<li><code>not</code>&nbsp;– 否定一个标准的检查，需要用在其他操作符之前 (e.g.&nbsp;<code>Q(age__not__mod=5)</code>)</li>\n<li><code>in</code>&nbsp;– 值在 <code>list</code> 中</li>\n<li><code>nin</code>&nbsp;– 值不在 <code>list</code> 中</li>\n<li><code>mod</code>&nbsp;–&nbsp;<code>value % x == y</code>, 其中 &nbsp;<code>x</code>&nbsp; 和 <code>y</code>&nbsp; 为给定的值</li>\n<li><code>all</code>&nbsp;– <code>list</code> 里面所有的值</li>\n<li><code>size</code>&nbsp;– 数组的大小</li>\n<li><code>exists</code>&nbsp;– 存在这个值</li>\n</ul>\n<h4 id=\"字符串查询\"><a href=\"#字符串查询\" class=\"headerlink\" title=\"字符串查询\"></a>字符串查询</h4><p>以下操作符可以快捷的进行正则查询：</p>\n<ul>\n<li><code>exact</code>&nbsp;– 字符串型字段完全匹配这个值</li>\n<li><code>iexact</code>&nbsp;– 字符串型字段完全匹配这个值（大小写敏感）</li>\n<li><code>contains</code>&nbsp;– 字符串字段包含这个值</li>\n<li><code>icontains</code>&nbsp;– 字符串字段包含这个值（大小写敏感）</li>\n<li><code>startswith</code>&nbsp;– 字符串字段由这个值开头</li>\n<li><code>istartswith</code>&nbsp;– 字符串字段由这个值开头（大小写敏感）</li>\n<li><code>endswith</code>&nbsp;– 字符串字段由这个值结尾</li>\n<li><code>iendswith</code>&nbsp;– 字符串字段由这个值结尾（大小写敏感）</li>\n<li><code>match</code>&nbsp;– 执行 <code>$elemMatch</code> 操作，所以你可以使用一个数组中的 document 实例</li>\n</ul>\n<h4 id=\"地理查询\"><a href=\"#地理查询\" class=\"headerlink\" title=\"地理查询\"></a>地理查询</h4><p>PASS</p>\n<h4 id=\"列表查询\"><a href=\"#列表查询\" class=\"headerlink\" title=\"列表查询\"></a>列表查询</h4><p>对于大多数字段，这种语法会查询出那些字段与给出的值相匹配的 document，但是当一个字段引用 <code>ListField</code> 的时候，而只会提供一条数据，那么包含这条数据的就会被匹配上：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Page</span>(<span class=\"title class_ inherited__\">Document</span>):</span><br><span class=\"line\">    tags = ListField(StringField())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This will match all pages that have the word 'coding' as an item in the</span></span><br><span class=\"line\"><span class=\"comment\"># 'tags' list</span></span><br><span class=\"line\">Page.objects(tags=<span class=\"string\">'coding'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"原始查询\"><a href=\"#原始查询\" class=\"headerlink\" title=\"原始查询\"></a>原始查询</h4><p>你可以通过 <code>__raw__</code> 参数来使用一个原始的 <code>PyMongo</code> 语句来进行查询，这样可以进行原始的完整查询：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Page.objects(__raw__={<span class=\"string\">'tags'</span>: <span class=\"string\">'coding'</span>})</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"限制和跳过结果\"><a href=\"#限制和跳过结果\" class=\"headerlink\" title=\"限制和跳过结果\"></a>限制和跳过结果</h3><p>就像传统的 ORM 一样，你有时候需要限制返回的结果的数量，或者需要跳过一定数量的结果。<code>QuerySet</code> 里面可以使用 <code>limit()</code> 和 <code>skip()</code> 这两个方法来实现，但是更推荐使用数组切割的语法：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Only the first 5 people</span></span><br><span class=\"line\">users = User.objects[:<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># All except for the first 5 people</span></span><br><span class=\"line\">users = User.objects[<span class=\"number\">5</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5 users, starting from the 11th user found</span></span><br><span class=\"line\">users = User.objects[<span class=\"number\">10</span>:<span class=\"number\">15</span>]</span><br></pre></td></tr></tbody></table></figure>\n\n<p>你可以指定让查询返回一个结果。如果这个条在数据库中不存在，那么会引发 <code>IndexError</code> 错误 。使用 <code>first()</code> 方法在数据不存在的时候会返回 <code>None</code>：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># Make sure there are no users</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>User.drop_collection()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>User.objects[<span class=\"number\">0</span>]</span><br><span class=\"line\">IndexError: <span class=\"built_in\">list</span> index out of <span class=\"built_in\">range</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>User.objects.first() == <span class=\"literal\">None</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>User(name=<span class=\"string\">'Test User'</span>).save()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>User.objects[<span class=\"number\">0</span>] == User.objects.first()</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"默认Document-查询\"><a href=\"#默认Document-查询\" class=\"headerlink\" title=\"默认Document 查询\"></a>默认 <code>Document</code> 查询</h3><p>默认情况下，<code>Document</code> 的 <code>objects</code> 属性返回一个一个 <code>QuerySet</code> 对象，它并没有进行任何筛选和过滤，它返回的是所有的数据对象。这一点可以通过给一个 <code>document</code> 定义一个方法来修改 一个 <code>queryset</code> 。这个方法需要两参数<code>__doc_cls</code> 和 <code>queryset</code> 。第一个参数是定义这个方法的 <code>Document</code> 类名（从这个意义上来说，这个方法像是一个 <code>classmethod()</code> 而不是一般的方法），第二个参数是初始化的 <code>queryset</code>。这个方法需要使用 <code>queryset_manager()</code> 来装饰来它，使得它被认可。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BlogPost</span>(<span class=\"title class_ inherited__\">Document</span>):</span><br><span class=\"line\">    title = StringField()</span><br><span class=\"line\">    date = DateTimeField()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @queryset_manager</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">objects</span>(<span class=\"params\">doc_cls, queryset</span>):</span><br><span class=\"line\">        <span class=\"comment\"># This may actually also be done by defining a default ordering for</span></span><br><span class=\"line\">        <span class=\"comment\"># the document, but this illustrates the use of manager methods</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryset.order_by(<span class=\"string\">'-date'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>你不用调用 <code>objects</code> 方法，你可以自定义更多的管理方法，例如：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BlogPost</span>(<span class=\"title class_ inherited__\">Document</span>):</span><br><span class=\"line\">    title = StringField()</span><br><span class=\"line\">    published = BooleanField()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @queryset_manager</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">live_posts</span>(<span class=\"params\">doc_cls, queryset</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryset.<span class=\"built_in\">filter</span>(published=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">BlogPost(title=<span class=\"string\">'test1'</span>, published=<span class=\"literal\">False</span>).save()</span><br><span class=\"line\">BlogPost(title=<span class=\"string\">'test2'</span>, published=<span class=\"literal\">True</span>).save()</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(BlogPost.objects) == <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(BlogPost.live_posts()) == <span class=\"number\">1</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"自定义-QuerySets\"><a href=\"#自定义-QuerySets\" class=\"headerlink\" title=\"自定义 QuerySets\"></a>自定义 QuerySets</h3><p>当你想自己定义一些方法来过滤 <code>document</code> 的时候，继承 <code>QuerySet</code> 类对你来说就是个好的方法。为了在 <code>document</code> 里面使用一个自定义的 <code>QuerySet</code> 类，你可以在 <code>document</code> 里的 <code>meta</code> 字典里设置 <code>queryset_class</code> 的值来实现它。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AwesomerQuerySet</span>(<span class=\"title class_ inherited__\">QuerySet</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_awesome</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.<span class=\"built_in\">filter</span>(awesome=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Page</span>(<span class=\"title class_ inherited__\">Document</span>):</span><br><span class=\"line\">    meta = {<span class=\"string\">'queryset_class'</span>: AwesomerQuerySet}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># To call:</span></span><br><span class=\"line\">Page.objects.get_awesome()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"Aggregation-聚合\"><a href=\"#Aggregation-聚合\" class=\"headerlink\" title=\"Aggregation 聚合\"></a>Aggregation 聚合</h3><p>MongoDB 提供了开箱即用的聚合方法，但没有 RDBMS 提供的那样多。MongoEngine 提供了一个包装过的内置的方法，同时自身提供了一些方法，它实现了在数据库服务上执行的 Javascript 代码的功能。</p>\n<h4 id=\"结果计数\"><a href=\"#结果计数\" class=\"headerlink\" title=\"结果计数\"></a>结果计数</h4><p>就像限制和跳过结果一样， <code>QuerySet</code> 对象提供了用来计数的方法 - <code>count()</code>，不过还有一个更 <code>Pythonic</code> 的方法来实现：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">num_users = <span class=\"built_in\">len</span>(User.objects)</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"更多功能\"><a href=\"#更多功能\" class=\"headerlink\" title=\"更多功能\"></a>更多功能</h4><p>当你想为 <code>document</code> 的特定的字段的数量计数的时候，可以使用 <code>sum()</code>：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">yearly_expense = Employee.objects.<span class=\"built_in\">sum</span>(<span class=\"string\">'salary'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>当你想求某个字段的平均值的时候，可以使用 <code>average()</code>：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mean_age = User.objects.average(<span class=\"string\">'age'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>MongoEngine 提供了一个方法来获取一个在集合里 <code>item</code> 的频率 - <code>item_frequencies()</code>。下面一个例子可以生成 <code>tag-clouds</code>：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Article</span>(<span class=\"title class_ inherited__\">Document</span>):</span><br><span class=\"line\">    tag = ListField(StringField())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># After adding some tagged articles...</span></span><br><span class=\"line\">tag_freqs = Article.objects.item_frequencies(<span class=\"string\">'tag'</span>, normalize=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> itemgetter</span><br><span class=\"line\">top_tags = <span class=\"built_in\">sorted</span>(tag_freqs.items(), key=itemgetter(<span class=\"number\">1</span>), reverse=<span class=\"literal\">True</span>)[:<span class=\"number\">10</span>]</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"查询效率和性能\"><a href=\"#查询效率和性能\" class=\"headerlink\" title=\"查询效率和性能\"></a>查询效率和性能</h3><p>PASS</p>\n<h3 id=\"高级查询\"><a href=\"#高级查询\" class=\"headerlink\" title=\"高级查询\"></a>高级查询</h3><p>有时候使用关键字参数返回的 <code>QuerySet</code> 不能完全满足你的查询需要。例如有时候你需要将约束条件进行 <code>and</code>，<code>or</code> 的操作。你可以使用 MongoEngine 提供的 <code>Q</code> 类来实现，一个 <code>Q</code> 类代表了一个查询的一部分，里面的参数设置与你查询 <code>document</code> 的时候相同。建立一个复杂查询的时候，你需要用 <code>&amp;</code> 或 <code>|</code> 操作符将 <code>Q</code> 对象连结起来。例如：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> mongoengine.queryset.visitor <span class=\"keyword\">import</span> Q</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get published posts</span></span><br><span class=\"line\">Post.objects(Q(published=<span class=\"literal\">True</span>) | Q(publish_date__lte=datetime.now()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get top posts</span></span><br><span class=\"line\">Post.objects((Q(featured=<span class=\"literal\">True</span>) &amp; Q(hits__gte=<span class=\"number\">1000</span>)) | Q(hits__gte=<span class=\"number\">5000</span>))</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"Atomic-updates（原子更新）\"><a href=\"#Atomic-updates（原子更新）\" class=\"headerlink\" title=\"Atomic updates（原子更新）\"></a>Atomic updates（原子更新）</h3><p><code>MongoDB 文档</code> 可以通过 <code>QuerySet</code> 上的 <code>update_one()</code>、<code>update()</code>、<code>modify()</code> 方法自动更新。下面几种操作符可以被用到这几种方法上：</p>\n<ul>\n<li><code>set</code>&nbsp;– 设置成一个指定的值</li>\n<li><code>unset</code>&nbsp;– 删除一个指定的值</li>\n<li><code>inc</code>&nbsp;– 将值加上一个给定的数</li>\n<li><code>dec</code>&nbsp;– 将值减去一个给定的数</li>\n<li><code>push</code>&nbsp;– 在 <code>list</code> 中添加一个值</li>\n<li><code>push_all</code>&nbsp;– 在 <code>list</code> 中添加一个值</li>\n<li><code>pop</code>&nbsp;– 移除 <code>list</code> 的第一项或最后一项（根据 <code>pop__&lt;field&gt;=val</code> 中 <code>val</code> 的值决定删除第一项还是最后一项，一般情况下，<code>val</code> 为负则删除第一项，为正则删除最后一项，参见：<a href=\"http://docs.mongodb.org/manual/reference/operator/update/pop/\">mongodb $pop</a></li>\n<li><code>pull</code>&nbsp;– 从 <code>list</code> 里面移除一个值</li>\n<li><code>pull_all</code>&nbsp;– 从 <code>list</code> 里面移除个值</li>\n<li><code>add_to_set</code>&nbsp;– 当要添加的值不在 <code>list</code> 中时，添加这个值</li>\n</ul>\n<p>原子更新的语法类似于查询语法，区别在于修饰操作符位于字段之前，而不是之后：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>post = BlogPost(title=<span class=\"string\">'Test'</span>, page_views=<span class=\"number\">0</span>, tags=[<span class=\"string\">'database'</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>post.save()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>BlogPost.objects(<span class=\"built_in\">id</span>=post.<span class=\"built_in\">id</span>).update_one(inc__page_views=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>post.reload()  <span class=\"comment\"># the document has been changed, so we need to reload it</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>post.page_views</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>BlogPost.objects(<span class=\"built_in\">id</span>=post.<span class=\"built_in\">id</span>).update_one(set__title=<span class=\"string\">'Example Post'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>post.reload()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>post.title</span><br><span class=\"line\"><span class=\"string\">'Example Post'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>BlogPost.objects(<span class=\"built_in\">id</span>=post.<span class=\"built_in\">id</span>).update_one(push__tags=<span class=\"string\">'nosql'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>post.reload()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>post.tags</span><br><span class=\"line\">[<span class=\"string\">'database'</span>, <span class=\"string\">'nosql'</span>]</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果没有修饰操作符，则默认为 <code>$set</code>：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">BlogPost.objects(<span class=\"built_in\">id</span>=post.<span class=\"built_in\">id</span>).update(title=<span class=\"string\">'Example Post'</span>)</span><br><span class=\"line\">BlogPost.objects(<span class=\"built_in\">id</span>=post.<span class=\"built_in\">id</span>).update(set__title=<span class=\"string\">'Example Post'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"服务器端-JavaScript-执行\"><a href=\"#服务器端-JavaScript-执行\" class=\"headerlink\" title=\"服务器端 JavaScript 执行\"></a>服务器端 JavaScript 执行</h3><p>可以写 Javascript 函数，然后发送到服务器来执行。它返回结果是 Javascript 函数的返回值。这个功能是通过 <code>QuerySet()</code> 对象的 <code>exec_js()</code> 方法实现。传递一个包含一个 Javascript 函数的字符串作为第一个参数。</p>\n<p>其余位置的参数的名字字段将作为您的 Javascript 函数的参数传递过去。</p>\n<p>在 JavaScript 函数范围中，一些变量可用：</p>\n<ul>\n<li><code>collection</code>&nbsp;– 对应使用的 <code>Document</code> 类的集合的名称</li>\n<li><code>query</code>&nbsp;– 一个 &nbsp;<code>QuerySet</code> 对象</li>\n<li><code>options</code>&nbsp;– 一个对象，它包含要传递给 <code>exec_js()</code> 函数的一些参数 </li>\n</ul>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum_field</span>(<span class=\"params\">document, field_name, include_negatives=<span class=\"literal\">True</span></span>):</span><br><span class=\"line\">    code = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    function(sumField) {</span></span><br><span class=\"line\"><span class=\"string\">        var total = 0.0;</span></span><br><span class=\"line\"><span class=\"string\">        db[collection].find(query).forEach(function(doc) {</span></span><br><span class=\"line\"><span class=\"string\">            var val = doc[sumField];</span></span><br><span class=\"line\"><span class=\"string\">            if (val &gt;= 0.0 || options.includeNegatives) {</span></span><br><span class=\"line\"><span class=\"string\">                total += val;</span></span><br><span class=\"line\"><span class=\"string\">            }</span></span><br><span class=\"line\"><span class=\"string\">        });</span></span><br><span class=\"line\"><span class=\"string\">        return total;</span></span><br><span class=\"line\"><span class=\"string\">    }</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    options = {<span class=\"string\">'includeNegatives'</span>: include_negatives}</span><br><span class=\"line\">    <span class=\"keyword\">return</span> document.objects.exec_js(code, field_name, **options)</span><br></pre></td></tr></tbody></table></figure>\n","categories":["MongoDB"],"tags":["MongoDB","Python","ORM"]},{"title":"Python 中用类编写装饰器","url":"/posts/201807/62594.html","content":"<p>在《流畅的 Python》一书杂谈中推荐使用类来编写装饰器。就我的理解来说，简单的装饰器仍然使用传统的函数来定义比较好。而复杂的、涉及很多状态的装饰器，用类的方法定义，结构会更加清晰，容易扩展。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RouterBase</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">router</span>(<span class=\"title class_ inherited__\">RouterBase</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__call__</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">func1</span>(<span class=\"params\">self,*args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"string\">\"\"\"辅助函数\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">func2</span>(<span class=\"params\">self,*args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"string\">\"\"\"辅助函数\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ... ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@router(<span class=\"params\"><span class=\"string\">'/index'</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>Python Web 框架中，我们会见到这样通过装饰器定义路由，而路由装饰器是非常复杂的，如果卸载一个函数中，这个函数一定是非常复杂的、难以维护的。而我们通过类定义这个路由装饰器，可以通过继承和在类中定义辅助函数，很好的拆分实现，进而优化我们的代码。</p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"http://python3-cookbook-personal.readthedocs.io/zh_CN/latest/c09/p09_define_decorators_as_classes.html\">将装饰器定义为类</a></li>\n<li><a href=\"https://stackoverflow.com/questions/111234/what-is-a-callable-in-python\">What is a “callable” in Python?</a></li>\n</ul>\n","categories":["Python"],"tags":["Python","装饰器"]},{"title":"Python 中的 super () 和 MRO","url":"/posts/201806/1663.html","content":"<p>术语：</p>\n<ul>\n<li>MRO: 方法解析顺序 (Method Resolution Order, MRO)</li>\n</ul>\n<p>环境：Python 3（Python 2 会有差别）</p>\n<h1 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super()\"></a>super()</h1><p>首选可以参看 Python 3 版本中 <code>super()</code> 说明文档： <a href=\"https://www.python.org/dev/peps/pep-3135/\">PEP 3135 – New Super</a>：<br>开篇即说：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">super</span>()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>等价于：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">super</span>(__class__, &lt;firstarg&gt;)</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"super-指的是-MRO-中的下一个类！\"><a href=\"#super-指的是-MRO-中的下一个类！\" class=\"headerlink\" title=\"super 指的是 MRO 中的下一个类！\"></a>super 指的是 MRO 中的下一个类！</h1><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">spam</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">'A.spam'</span>)</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().spam()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">spam</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">'B.spam'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>(A, B):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>下面我们测试说明。首先实例化 <code>A</code> 类，然后调用它的 <code>spam</code> 方法，很显然，会出错：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = A()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.spam()</span><br><span class=\"line\">A.spam</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">4</span>, <span class=\"keyword\">in</span> spam</span><br><span class=\"line\">AttributeError: <span class=\"string\">'super'</span> <span class=\"built_in\">object</span> has no attribute <span class=\"string\">'spam'</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>那么，我们再做如下测试：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = C()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.spam()</span><br><span class=\"line\">A.spam</span><br><span class=\"line\">B.spam</span><br></pre></td></tr></tbody></table></figure>\n\n<p>你可以看到在 <code>A</code> 类中使用 <code>super().spam()</code> 实际上调用的是跟 <code>A</code> 类毫无关系的 <code>B</code> 类中的 <code>spam()</code> 方法。 这个用 <code>C类</code> 的 MRO 列表就可以完全解释清楚了：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>C.__mro__</span><br><span class=\"line\">(&lt;<span class=\"keyword\">class</span> <span class=\"string\">'__main__.C'</span>&gt;, &lt;<span class=\"keyword\">class</span> <span class=\"string\">'__main__.A'</span>&gt;, &lt;<span class=\"keyword\">class</span> <span class=\"string\">'__main__.B'</span>&gt;, &lt;<span class=\"keyword\">class</span> <span class=\"string\">'object'</span>&gt;)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在 MRO 顺序中， <code>B</code> 类时 <code>A</code> 类的下一个类即为 <code>B</code> 类。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://python3-cookbook.readthedocs.io/zh_CN/latest/c08/p07_calling_method_on_parent_class.html\">调用父类方法 - 《Python Cookbook 3rd》</a></li>\n<li><a href=\"https://rhettinger.wordpress.com/2011/05/26/super-considered-super/\">Python’s super() considered super!</a></li>\n</ul>\n","categories":["Python"],"tags":["Python"]},{"title":"Python 中的变量作用域规则","url":"/posts/201807/4039.html","content":"<p>在《流畅的 Python》一书的 7.4 节讲《变量作用域规则》一节，提到如下例子：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">f1</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f1(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">3</span>, <span class=\"keyword\">in</span> f1</span><br><span class=\"line\">NameError: name <span class=\"string\">'b'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></tbody></table></figure>\n\n<p>上述示例中错误很明显。我们再看下一个例子：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">f2</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(a)    <span class=\"comment\"># ①</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(b)    <span class=\"comment\"># ②</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    b = <span class=\"number\">9</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f2(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">3</span>, <span class=\"keyword\">in</span> f</span><br><span class=\"line\">UnboundLocalError: local variable <span class=\"string\">'b'</span> referenced before assignment</span><br></pre></td></tr></tbody></table></figure>\n\n<span id=\"more\"></span>\n\n<p>首选 ① 输出 <code>3</code>。然后到 ② 执行不了，出现错误。书中解释：</p>\n<pre><code>Python 编译函数的定义体时，它判断 b 是局部变量，因为在函数中给它赋值了。\n</code></pre>\n<p>然后又用 <code>dis</code> 库，查看 <code>f2</code> 函数的字节码。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">f3</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">global</span> b</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(a)    <span class=\"comment\"># ①</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(b)    <span class=\"comment\"># ②</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    b = <span class=\"number\">9</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f3(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(b)</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> dis <span class=\"keyword\">import</span> dis</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dis(f1)</span><br><span class=\"line\">  <span class=\"number\">2</span>           <span class=\"number\">0</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"built_in\">print</span>)</span><br><span class=\"line\">              <span class=\"number\">2</span> LOAD_FAST                <span class=\"number\">0</span> (a)</span><br><span class=\"line\">              <span class=\"number\">4</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">              <span class=\"number\">6</span> POP_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">3</span>           <span class=\"number\">8</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"built_in\">print</span>)</span><br><span class=\"line\">             <span class=\"number\">10</span> LOAD_GLOBAL              <span class=\"number\">1</span> (b)         <span class=\"comment\"># &lt;&lt;= ①</span></span><br><span class=\"line\">             <span class=\"number\">12</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">             <span class=\"number\">14</span> POP_TOP</span><br><span class=\"line\">             <span class=\"number\">16</span> LOAD_CONST               <span class=\"number\">0</span> (<span class=\"literal\">None</span>)</span><br><span class=\"line\">             <span class=\"number\">18</span> RETURN_VALUE</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dis(f2)</span><br><span class=\"line\">  <span class=\"number\">2</span>           <span class=\"number\">0</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"built_in\">print</span>)</span><br><span class=\"line\">              <span class=\"number\">2</span> LOAD_FAST                <span class=\"number\">0</span> (a)</span><br><span class=\"line\">              <span class=\"number\">4</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">              <span class=\"number\">6</span> POP_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">3</span>           <span class=\"number\">8</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"built_in\">print</span>)</span><br><span class=\"line\">             <span class=\"number\">10</span> LOAD_FAST                <span class=\"number\">1</span> (b)       <span class=\"comment\"># &lt;&lt;= ②</span></span><br><span class=\"line\">             <span class=\"number\">12</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">             <span class=\"number\">14</span> POP_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">4</span>          <span class=\"number\">16</span> LOAD_CONST               <span class=\"number\">1</span> (<span class=\"number\">9</span>)</span><br><span class=\"line\">             <span class=\"number\">18</span> STORE_FAST               <span class=\"number\">1</span> (b)</span><br><span class=\"line\">             <span class=\"number\">20</span> LOAD_CONST               <span class=\"number\">0</span> (<span class=\"literal\">None</span>)</span><br><span class=\"line\">             <span class=\"number\">22</span> RETURN_VALUE</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dis(f3)</span><br><span class=\"line\">  <span class=\"number\">3</span>           <span class=\"number\">0</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"built_in\">print</span>)</span><br><span class=\"line\">              <span class=\"number\">2</span> LOAD_FAST                <span class=\"number\">0</span> (a)</span><br><span class=\"line\">              <span class=\"number\">4</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">              <span class=\"number\">6</span> POP_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">4</span>           <span class=\"number\">8</span> LOAD_GLOBAL              <span class=\"number\">0</span> (<span class=\"built_in\">print</span>)</span><br><span class=\"line\">             <span class=\"number\">10</span> LOAD_GLOBAL              <span class=\"number\">1</span> (b)       <span class=\"comment\"># &lt;&lt;= ③</span></span><br><span class=\"line\">             <span class=\"number\">12</span> CALL_FUNCTION            <span class=\"number\">1</span></span><br><span class=\"line\">             <span class=\"number\">14</span> POP_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"number\">5</span>          <span class=\"number\">16</span> LOAD_CONST               <span class=\"number\">1</span> (<span class=\"number\">9</span>)</span><br><span class=\"line\">             <span class=\"number\">18</span> STORE_GLOBAL             <span class=\"number\">1</span> (b)</span><br><span class=\"line\">             <span class=\"number\">20</span> LOAD_CONST               <span class=\"number\">0</span> (<span class=\"literal\">None</span>)</span><br><span class=\"line\">             <span class=\"number\">22</span> RETURN_VALUE</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>看 <code>&lt;&lt;=</code> 行的不同：①、③ 中编程器将 <code>b</code> 视作全局变量，而 ② 中编辑器将 <code>b</code> 视作局部变量。综上，我们已经很直观的看到问题的所在，至于编辑器具体实现，以及为什么这样实现，还有待进一步学习和查阅相关资料。</p>\n<p>再来重新思考 Python 作用域（scopes）：</p>\n<pre><code>L （Local） 局部作用域\nE （Enclosing） 闭包函数外的函数中\nG （Global） 全局作用域\nB （Built-in） 内建作用域\n</code></pre>\n<p>它们以 <code>L –&gt; E –&gt; G –&gt; B</code> 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内建中找。<br>（开坑，待续……）</p>\n","categories":["Python"],"tags":["Python"]},{"title":"Python 内建函数 type","url":"/posts/201807/22083.html","content":"<p>环境：Python 3.6.5</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ python -c \"import sys;print(sys.version)\"</span><br><span class=\"line\">3.6.5 (default, Apr  1 2018, 05:46:30)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>Python 内建函数 type，一般用判断变量类型，其实它还有一个比较魔术的用法，我们首先看一下它的 <code>docstring</code>：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; print(type.__doc__)</span><br><span class=\"line\">type(object_or_name, bases, dict)</span><br><span class=\"line\">type(object) -&gt; the object's type</span><br><span class=\"line\">type(name, bases, dict) -&gt; a new type</span><br></pre></td></tr></tbody></table></figure>\n\n<p>下面我们探讨下怎样用 <code>type()</code> 构造一个新类。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"构造一个空类\"><a href=\"#构造一个空类\" class=\"headerlink\" title=\"构造一个空类\"></a>构造一个空类</h2><p>类的 <code>__name__</code> 属性不需要同存储这个类的变量的名称相同。<br>当在一个 <code>*.py</code> 顶层（在模块上下文中）时，<code>class</code> 命令将类绑定到 <code>module object</code>，使用类的名称作为键。</p>\n<p>当我们使用 <code>type</code> 时，<code>__name__</code>和绑定之间没有链接。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">cls = type('A', (object,), {})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这个新类有我们预期的名字：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">cls                 #=&gt; __main__.A</span><br><span class=\"line\">cls.__name__        #=&gt; 'A'</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">for key, val in cls.__dict__.items():</span><br><span class=\"line\">    print(key,val,sep=\": \")</span><br></pre></td></tr></tbody></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">__module__: __main__</span><br><span class=\"line\">__dict__: &lt;attribute '__dict__' of 'A' objects&gt;</span><br><span class=\"line\">__weakref__: &lt;attribute '__weakref__' of 'A' objects&gt;</span><br><span class=\"line\">__doc__: None</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"构建任何类\"><a href=\"#构建任何类\" class=\"headerlink\" title=\"构建任何类\"></a>构建任何类</h2><p>我们通过传递给 <code>type()</code> 空字典 <code>{}</code> 获得一个空类，<code>__dic__</code>只是上述几个键。<br>我们可以通过传递一个非空字典来获取更多有趣的类。同时我们可以通过更多有趣的 <code>bases</code>，以实现继承。</p>\n<p>我们尝试使用 <code>dict</code> 的参数来指定这些特殊属性，如： <code>__doc__</code>, <code>__name__</code> 和 <code>__module__</code>。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">body = dict(__doc__='docstring', __name__='not_A', __module__='modname')</span><br><span class=\"line\">cls2 = type('A', (object,), body)</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">cls2.__doc__, cls2.__name__, cls2.__module__</span><br><span class=\"line\">#=&gt; ('docstring', 'A', 'modname')</span><br></pre></td></tr></tbody></table></figure>\n\n<p>参见：<a href=\"https://jfine-python-classes.readthedocs.io/en/latest/type-name-bases-dict.html\">type(name, bases, dict)</a></p>\n"},{"title":"Python 协程与 async/await","url":"/posts/201807/59429.html","content":"<h2 id=\"为什么引入-async-x2F-await\"><a href=\"#为什么引入-async-x2F-await\" class=\"headerlink\" title=\"为什么引入 async/await\"></a>为什么引入 async/await</h2><p>关于 async/await 最初的提案，参见：<a href=\"https://www.python.org/dev/peps/pep-0492/\">PEP492</a> 以及它的<a href=\"http://www.cnblogs.com/animalize/p/4738941.html\">中文翻译</a>。</p>\n<p>具体细节我们先不做了解，先看一下增加 async/await 解决了什么问题（引自翻译）：</p>\n<p>在以前，我们可以用生成器实现协程（PEP 342），后来又对其进行了改进，引入了 <code>yield from</code> 语法（PEP 380）。但仍有一些缺点：</p>\n<ul>\n<li>协程和普通生成器使用相同的语法，所以很容易把它们搞混，初学者更是如此。</li>\n<li>一个函数是否是一个协程，取决于它里面是否出现了 <code>yield</code> 或 <code>yield from</code> 语句。这并不明显，容易在重构函数的时候搞乱，导致出错。</li>\n<li>异步调用被 <code>yield</code> 语法限制了，我们不能获得、使用更多的语法特性，比如 <code>with</code> 和 <code>for</code>。</li>\n</ul>\n<p><strong>PEP492</strong> 把协程从生成器独立出来，成为 Python 的一个原生事物。这会消除协程和生成器之间的混淆，方便编写不依赖特定库的协程代码。也为 linter 和 IDE 进行代码静态分析提供了机会。</p>\n<p>使用原生协程和相应的新语法，我们可以在异步编程时使用上下文管理器（context manager）和迭代器。如下文所示，新的 async with 语句可以在进入、离开运行上下文（runtime context）时进行异步调用，而 async for 语句可以在迭代时进行异步调用。</p>\n<p>综上，虽然在 CPython 的内部实现，用 <code>def async</code> 定义的协程仍然是一个生成器，但是已经被封装好了，我们不用关心其晦涩的细节。添加 async/await 后我们编写异步协程程序会更加的容易、直观。同时增加异步迭代器 <code>async for</code> 和异步上下文管理器 <code>async with</code>，我们在编写异步程序将更加的方便。</p>\n<span id=\"more\"></span>\n<h2 id=\"详细内容\"><a href=\"#详细内容\" class=\"headerlink\" title=\"详细内容\"></a>详细内容</h2><p>一般我们将新语法 async/await 定义的协程称为：原生协程；将传统方法实现的协程称为：生成器协程。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>使用如下语法声明原生协程：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">read_data</span>(<span class=\"params\">db</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>协程语法有如下关键点：</p>\n<ul>\n<li><code>async def</code> 函数必定是协程，即使里面不含有 <code>await</code> 语句。</li>\n<li>如果在 async 函数里面使用 <code>yield</code> 或 <code>yield from</code> 语句，会引发 <code>SyntaxError</code> 异常。</li>\n<li>在 CPython 内部，引入两个新的代码对象标识（code object flags）：<ol>\n<li><code>CO_COROUTINE</code> 表示这是原生协程。（由新语法定义）</li>\n<li><code>CO_ITERABLE_COROUTINE</code> 表示这是用生成器实现的协程，但是和原生协程兼容。（用装饰器 <code>types.coroutine()</code> 装饰过的生成器协程）</li>\n</ol>\n</li>\n<li>调用一个普通生成器，返回一个生成器对象（generator object）；相应的，调用一个协程返回一个协程对象（coroutine object）。</li>\n<li>协程不再抛出 <code>StopIteration</code> 异常，作为替代会抛出 <code>RuntimeError</code> 异常。</li>\n<li>如果一个协程从未等待就被垃圾收集器销毁了，会引发一个 <code>RuntimeWarning</code> 异常。</li>\n</ul>\n<h3 id=\"types-coroutine\"><a href=\"#types-coroutine\" class=\"headerlink\" title=\"types.coroutine()\"></a>types.coroutine()</h3><p>types 模块添加了一个新函数 <code>coroutine(fn)</code>。“用生成器实现的协程” 和 “原生协程” 本身是不互通，不兼容的，使用它可以让两者之间的互操作。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@types.coroutine</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">process_data</span>(<span class=\"params\">db</span>):</span><br><span class=\"line\">    data = <span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> read_data(db)</span><br><span class=\"line\">    ...</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"await-表达式\"><a href=\"#await-表达式\" class=\"headerlink\" title=\"await 表达式\"></a>await 表达式</h3><p>新的 await 表达式用于获得协程执行的结果：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">read_data</span>(<span class=\"params\">db</span>):</span><br><span class=\"line\">    data = <span class=\"keyword\">await</span> db.fetch(<span class=\"string\">'SELECT ...'</span>)</span><br><span class=\"line\">    ...</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>await</code> 和 <code>yield from</code> 类似，它挂起 <code>read_data</code> 的执行，直到 <code>db.fetch</code> 执行完毕并返回结果。</p>\n<p>以 CPython <code>内部，await</code> 使用了 <code>yield from</code> <code>的实现，但加入了一个额外步骤——验证它的参数类型。await</code> 只接受 <code>awaitable</code> 对象，<code>awaitable</code> 对象是以下的其中一个：</p>\n","categories":["Python"],"tags":["Python","协程","异步"]},{"title":"Python 命令行神器 Click（一）快速上手","url":"/posts/201807/15308.html","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"http://click.pocoo.org/\">Click</a> 是 Python 的一个第三方库，它只需要很少的代码就能以可组合的方式创建漂亮的命令行工具。 这是 “命令行界面创建工具库”。 它具有高度可配置性，但具有开箱即用的合理默认值。</p>\n<ul>\n<li>命令的任意嵌套</li>\n<li>自动生成帮助信息</li>\n<li>支持在运行时子命令的延迟加载</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">pip install click</span><br></pre></td></tr></tbody></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"基础示例\"><a href=\"#基础示例\" class=\"headerlink\" title=\"基础示例\"></a>基础示例</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ./hello.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> click</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@click.command()                    </span><span class=\"comment\"># ①</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hello</span>():</span><br><span class=\"line\">    <span class=\"string\">\"\"\"命令行界的 Hello World!\"\"\"</span></span><br><span class=\"line\">    click.echo(<span class=\"string\">'Hello World!'</span>)      <span class=\"comment\"># ②</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    hello()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然后我们在控制台中查看：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ python hello.py</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">$ python hello.py --<span class=\"built_in\">help</span></span><br><span class=\"line\">Usage: hello.py [OPTIONS]</span><br><span class=\"line\"></span><br><span class=\"line\">  命令行界的 Hello World!</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  --<span class=\"built_in\">help</span>  Show this message and <span class=\"built_in\">exit</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>click 是基于装饰器的。在上述示例中的 ① 行，我们在函数上使用 <code>click.command()</code> 装饰器来将该函数变成一个命令行工具。注意在程序的 ② 行，我们使用了了 <code>click.echo()</code> 函数，它等价于 <code>print</code>，不过它的参数更丰富：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">click.echo(message=<span class=\"literal\">None</span>, file=<span class=\"literal\">None</span>, nl=<span class=\"literal\">True</span>, err=<span class=\"literal\">False</span>, color=<span class=\"literal\">None</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如上，<code>color</code> 可以定义打印颜色，让我们的输出更美观。详情请查看官网文档 <a href=\"http://click.pocoo.org/6/api/#click.echo\">click.echo</a></p>\n<h2 id=\"嵌套命令\"><a href=\"#嵌套命令\" class=\"headerlink\" title=\"嵌套命令\"></a>嵌套命令</h2><p>现实中我们的命令行程序可能要实现好多功能，那么单纯的用一个指令带一堆选项或者参数的方式可能不够用，这是我们可以用 <code>click.group()</code> 定义嵌套命令来解决。然后我们用 <code>add_command</code> 函数，将子命令绑定到嵌套命令主函数上：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> click</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@click.group()</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cli</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@click.command()</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">initdb</span>():</span><br><span class=\"line\">    click.echo(<span class=\"string\">'Initialized the database'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@click.command()</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dropdb</span>():</span><br><span class=\"line\">    click.echo(<span class=\"string\">'Dropped the database'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">cli.add_command(initdb)</span><br><span class=\"line\">cli.add_command(dropdb)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    cli()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在控制台中运行代码：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ python .\\cli.py --<span class=\"built_in\">help</span></span><br><span class=\"line\">Usage: cli.py [OPTIONS] COMMAND [ARGS]...</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  --<span class=\"built_in\">help</span>  Show this message and <span class=\"built_in\">exit</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\">  dropdb</span><br><span class=\"line\">  initdb</span><br><span class=\"line\">$ python .\\cli.py initdb</span><br><span class=\"line\">Initialized the database</span><br><span class=\"line\">$ python .\\cli.py initdb --<span class=\"built_in\">help</span></span><br><span class=\"line\">Usage: cli.py initdb [OPTIONS]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  --<span class=\"built_in\">help</span>  Show this message and <span class=\"built_in\">exit</span>.</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"添加参数\"><a href=\"#添加参数\" class=\"headerlink\" title=\"添加参数\"></a>添加参数</h2><p>我们可以用 <a href=\"http://click.pocoo.org/6/api/#click.option\"><code>option()</code></a> 和 <a href=\"http://click.pocoo.org/6/api/#click.argument\"><code>argument()</code></a> 装饰器给命令行程序添加参数。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">import click</span><br><span class=\"line\"></span><br><span class=\"line\">@click.command()</span><br><span class=\"line\">@click.option(<span class=\"string\">'--count'</span>, <span class=\"string\">\"-c\"</span>, default=1, <span class=\"built_in\">type</span>=click.INT, <span class=\"built_in\">help</span>=<span class=\"string\">'number of greetings'</span>)</span><br><span class=\"line\">@click.argument(<span class=\"string\">'name'</span>)</span><br><span class=\"line\">def hello(count, name):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(count):</span><br><span class=\"line\">        click.echo(<span class=\"string\">'Hello %s!'</span> % name)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然后我们在命令行中运行：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ python hello.py --<span class=\"built_in\">help</span></span><br><span class=\"line\">Usage: hello.py [OPTIONS] NAME</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -c, --count INTEGER  number of greetings</span><br><span class=\"line\">  --<span class=\"built_in\">help</span>           Show this message and <span class=\"built_in\">exit</span>.</span><br></pre></td></tr></tbody></table></figure>\n\n<p>我们使用 <code> @click.option</code> 定义命令行的参数：</p>\n<ul>\n<li>在 <code>option</code> 函数第一个参数中定义 <code>--count</code> 命令行选项名。</li>\n<li>在 <code>option</code> 函数第二个参数中定义 <code>-c</code> 命令行<strong>短</strong>选项名。</li>\n<li><code>default</code> 定义参数的默认值</li>\n<li><code>type</code> 定义参数的类型</li>\n<li><code>help</code> 定义命令的帮助信息</li>\n</ul>\n<p>详情，请查看文档 <a href=\"http://click.pocoo.org/6/options/\">Options</a></p>\n<h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>对上面编写代码，文件末尾有一个需要有个运行块，如下所示：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__ main__'</span>：</span><br><span class=\"line\">    hello()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如传统上的一个独立 Python 文件。使用 click，您可以继续这样做，但有更好的方法通过 <code>setuptools</code>。</p>\n<p>有两个主要（以及更多）原因：</p>\n<ul>\n<li>第一个原因是 setuptools 自动为 Windows 生成可执行包装器，因此您的命令行实用程序也可以在 Windows 上运行。</li>\n<li>第二个原因是 <code>setuptools</code> 脚本在 Unix 上使用 <code>virtualenv</code>，而不必激活 <code>virtualenv</code>。 这是一个非常有用的概念，允许您将所有需求的脚本捆绑到 <code>virtualenv</code> 中。</li>\n<li></li>\n</ul>\n<p>Click 非常适合使用它，实际上其他文档（官网文档其他部分）将假设您正在通过 <code>setuptools</code> 编写应用程序。</p>\n<p>我强烈建议您在阅读其余部分之前先查看 <a href=\"http://click.pocoo.org/6/setuptools/#setuptools-integration\">Setuptools Integration</a> 章节，因为示例假设您将使用 <code>setuptools</code>。</p>\n","categories":["Python"],"tags":["Python","命令行"]},{"title":"Python 命令行神器 Click（二）打包","url":"/posts/201807/4615.html","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>要用 <code>setuptools</code> 打包你的 script，您只需要这个 Python 包的脚本文件和 <code>setup.py</code> 文件。 想象一下这个目录结构：</p>\n<pre><code>yourscript.py\nsetup.py\n</code></pre>\n<p>你的脚本文件 <code>yourscript.py</code> 内容：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> click</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@click.command()</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cli</span>():</span><br><span class=\"line\">    <span class=\"string\">\"\"\"Example script.\"\"\"</span></span><br><span class=\"line\">    click.echo(<span class=\"string\">'Hello World!'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>而 <code>setup.py</code> 文件内容：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> setuptools <span class=\"keyword\">import</span> setup</span><br><span class=\"line\"></span><br><span class=\"line\">setup(</span><br><span class=\"line\">    name=<span class=\"string\">'yourscript'</span>,</span><br><span class=\"line\">    version=<span class=\"string\">'0.1'</span>,</span><br><span class=\"line\">    py_modules=[<span class=\"string\">'yourscript'</span>],</span><br><span class=\"line\">    install_requires=[</span><br><span class=\"line\">        <span class=\"string\">'Click'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    entry_points=<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">        [console_scripts]</span></span><br><span class=\"line\"><span class=\"string\">        yourscript=yourscript:cli</span></span><br><span class=\"line\"><span class=\"string\">    '''</span>,</span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>重点在 <code>entry_points</code> 参数中。在 <code>console_scripts</code> 下面，每行标识一个控制台脚本。 等号（=）左边是应该生成的命令行应用的名称，等号右边是导入路径，后跟冒号（:) 和 click 命令函数。</p>\n<p>就这样！</p>\n<span id=\"more\"></span>\n\n<h2 id=\"测试程序\"><a href=\"#测试程序\" class=\"headerlink\" title=\"测试程序\"></a>测试程序</h2><p>要测试脚本，您可以创建一个新的 virtualenv，然后安装您的包：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">virtualenv venv</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">. venv/bin/activate</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">pip install --editable .</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>之后，您的命令应该可用：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">yourscript</span></span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"包中的命令行应用\"><a href=\"#包中的命令行应用\" class=\"headerlink\" title=\"包中的命令行应用\"></a>包中的命令行应用</h2><p>如果您的脚本正在增长，并且您希望切换到包含在 Python 包中的脚本，我们只需要做很少的更改就能达到目的。 我们假设您的目录结构更改为：</p>\n<pre><code>yourpackage/\n    __init__.py\n    main.py\n    utils.py\n    scripts/\n        __init__.py\n        yourscript.py\n</code></pre>\n<p>在这种情况下，您可以使用软件包和 setuptools 的自动软件包查找支持，而不是在 <code>setup.py</code> 文件中使用 <code>py_modules</code>。 除此之外，还建议包括其他包数据。</p>\n<p>这样，你只需要对 <code>setup.py</code> 内容做如下修改：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> setuptools <span class=\"keyword\">import</span> setup, find_packages</span><br><span class=\"line\"></span><br><span class=\"line\">setup(</span><br><span class=\"line\">    name=<span class=\"string\">'yourpackage'</span>,</span><br><span class=\"line\">    version=<span class=\"string\">'0.1'</span>,</span><br><span class=\"line\">    packages=find_packages(),</span><br><span class=\"line\">    include_package_data=<span class=\"literal\">True</span>,</span><br><span class=\"line\">    install_requires=[</span><br><span class=\"line\">        <span class=\"string\">'Click'</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    entry_points=<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">        [console_scripts]</span></span><br><span class=\"line\"><span class=\"string\">        yourscript=yourpackage.scripts.yourscript:cli</span></span><br><span class=\"line\"><span class=\"string\">    '''</span>,</span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n","categories":["Python"],"tags":["Python","命令行"]},{"title":"Python 命令行神器 Click（三）细节","url":"/posts/201807/755.html","content":"<h2 id=\"命令行应用帮助\"><a href=\"#命令行应用帮助\" class=\"headerlink\" title=\"命令行应用帮助\"></a>命令行应用帮助</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># @click.command(help=\"此命令帮助\")</span></span><br><span class=\"line\"><span class=\"meta\">@click.command()</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cli</span>():</span><br><span class=\"line\">    <span class=\"string\">\"\"\"此命令 docstring \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果你的 <code>click.command()</code> 没有定义 <code>help</code> 参数，则程序会用函数体的 <code>docstring</code> 内容代替。</p>\n<span id=\"more\"></span>\n\n<p>更多细节请查阅官网文档：</p>\n<ul>\n<li><a href=\"http://click.pocoo.org/6/parameters/\">Click 文档：装饰器函数参数</a></li>\n<li><a href=\"http://click.pocoo.org/6/options/\">Click 文档：命令行选项</a></li>\n<li><a href=\"http://click.pocoo.org/6/arguments/\">Click 文档：命令行参数</a></li>\n<li><a href=\"http://click.pocoo.org/6/commands/\">Click 文档：命令组</a></li>\n<li><a href=\"http://click.pocoo.org/6/prompts/\">Click 文档：用户输入提示</a></li>\n<li><a href=\"http://click.pocoo.org/6/documentation/\">Click 文档：定义命令行帮助文档</a></li>\n<li><a href=\"http://click.pocoo.org/6/complex/\">Click 文档：复杂应用</a></li>\n<li><a href=\"http://click.pocoo.org/6/advanced/\">Click 文档：高级用法</a></li>\n<li><a href=\"http://click.pocoo.org/6/testing/\">Click 文档：测试应用</a></li>\n<li><a href=\"http://click.pocoo.org/6/utils/\">Click 文档：实用工具</a></li>\n<li><a href=\"http://click.pocoo.org/6/bashcomplete/\">Click 文档：Bash <tab> 完成</tab></a></li>\n<li><a href=\"http://click.pocoo.org/6/exceptions/\">Click 文档：异常处理</a></li>\n</ul>\n<p>… …</p>\n<p>以及参考文章：</p>\n<ul>\n<li><a href=\"https://xin053.github.io/2016/07/31/click%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/\">click 命令行工具使用详解</a></li>\n</ul>\n","categories":["Python"],"tags":["Python","命令行"]},{"title":"Python 并发编程之 asyncio","url":"/posts/201807/9553.html","content":"<p><code>asyncio</code> 模块提供了使用协程编写<strong>单线程</strong>并发代码，通过套接字和其他资源复用 I​​/O 访问，运行网络客户端和服务器以及其他相关原语的基础结构。</p>\n<p>异步编程比传统的 “顺序” 编程更复杂。</p>\n<p>官方文档：<a href=\"https://docs.python.org/3/library/asyncio.html\">asyncio - 异步 I/O、事件循环、协程和任务</a></p>\n","categories":["Python"],"tags":["Python","并发","asyncio"]},{"title":"Python 并发编程之 future","url":"/posts/201807/39146.html","content":"<p>Python 中的并发主要涉及三种：多进程、多线程、协程。</p>\n<p>相信提到多线程和多进程大家首先想到的是标准库 <code>threading</code> 和 <code>multiprocessing</code>。在 Python 中，这两个标准库几乎成了 Python 并发编程的代名词。对于这两个标准库，无论网络还是书籍，可查阅的资料非常丰富，我们不多做介绍。本文主要介绍从 Python3.2 开始被纳入标准库的 <code>concurrent.futures</code>，它是对 <code>threading</code> 和 <code>multiprocessing</code> 进一步的封装和高级别的抽象，并暴露出统一的接口，帮助开发者非常方便的实现异步调用。最初的提案见于 <a href=\"https://www.python.org/dev/peps/pep-3148/\">PEP 3148</a>。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"模块接口\"><a href=\"#模块接口\" class=\"headerlink\" title=\"模块接口\"></a>模块接口</h2><p><code>concurrent.futures</code> 模块提供的接口很简单，提供了类：</p>\n<ul>\n<li><code>Executor</code>：一个抽象类，提供异步执行调用的方法。 我们一般使用其具体的子类，而不直接调用它。</li>\n<li><code>ThreadPoolExecutor</code>：是 <code>Executor</code> 的子类。提供了线程池的支持。</li>\n<li><code>ProcessPoolExecutor</code>：是 <code>Executor</code> 的子类。提供了线程池的支持。把工作分配给多个 Python 进程处理。因此，如果需要做 CPU 密集型处理，使用这个模块能绕开 GIL，利用所有可用的 CPU 核心。</li>\n<li><code>Future</code>：封装了可调用的异步执行。 其实例由 <code>Executor.submit()</code> 创建，表示可能已经完成或者尚未完成的延迟计算。</li>\n</ul>\n<p>以及模块函数：</p>\n<ul>\n<li><code>await(fs, timeout=None, return_when=ALL_COMPLETED)</code>：等待由 <code>fs</code> 给出的 <code>Future</code> 实例（可能由不同的 <code>Executor</code> 实例创建）完成。返回一个命名的 2 元组的集合。第一个集合，名为 <code>done</code>，包含在等待完成之前完成（完成或被取消）的 future。第二个集合，名为 <code>not_done</code>，包含未完成的 future。</li>\n<li><code>as_completed(fs, timeout=None)</code>：返回由 <code>fs</code> 给出的 <code>Future</code> 实例（可能由不同的 <code>Executor</code> 实例创建）的迭代器，它们在结束（结束状态可能是完成或被取消）时产生 future。 <code>fs</code> 复制的任何期货都将被退回一次。 在调用 <code>as_completed()</code> 之前完成的任何 future 都将首先产生。 如果异步函数超时，则调用 <code>__next__()</code> 返回迭代器时会引发 <code>concurrent.futures.TimeoutError</code>。 <code>timeout</code> 可以是 <code>int</code> 或 <code>float</code>。如果未指定 <code>timeout</code> 或 <code>None</code>，则等待时间没有限制。</li>\n</ul>\n<h3 id=\"Executor\"><a href=\"#Executor\" class=\"headerlink\" title=\"Executor\"></a>Executor</h3><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">concurrent</span>.futures.Executor</span><br></pre></td></tr></tbody></table></figure>\n\n<p>它提供如下方法：</p>\n<ul>\n<li><code>submit(fn, *args, **kwargs)</code>：将可调用的 <code>fn</code> 调度为 <code>fn(* args ** kwargs)</code> 并返回表示可调用执行的 <code>Future</code> 对象。</li>\n</ul>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> ThreadPoolExecutor(max_workers=<span class=\"number\">1</span>) <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">    future = executor.submit(<span class=\"built_in\">pow</span>, <span class=\"number\">323</span>, <span class=\"number\">1235</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(future.result())</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li><p><code>map(func, *iterables, timeout=None, chunksize=1)</code>：类似于 <code>map(func, *iterables)</code>，但是 <code>func</code> 是异步执行。若想并发运行多个可调用的对象可调用此函数。</p>\n<ul>\n<li><code>func</code>：需要异步执行的函数。</li>\n<li><code>*iterables</code>：可迭代对象，如列表等。每一次 <code>func</code> 执行，都会从 <code>iterables</code> 中取参数。</li>\n<li><code>timeout</code>：设置每次异步操作的超时时间。它的值可以是 <code>int</code> 或 <code>float</code>，如果操作超时，会返回 <code>raisesTimeoutError</code>；如果不指定 timeout 参数，则不设置超时间。</li>\n</ul>\n</li>\n<li><p><code>shutdown(wait=True)</code>：向执行者发出信号，表示当目前待处理的期货执行完毕时，它应该释放它正在使用的任何资源。 在关闭后调用 <code>Executor.submit()</code> 和 <code>Executor.map()</code> 将引发 <code>RuntimeError</code>。</p>\n</li>\n</ul>\n<p><code>ThreadPoolExecutor</code> 和 <code>ProcessPoolExecutor</code>，是 <code>Executor</code> 的子类，它们都实现了通用的 <code>Executor</code> 接口，因此使用 <code>concurrent.futures</code> 模块能特别轻松地把基于线程的方案转成基于进程的方案。</p>\n<h3 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h3><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPoolExecutor</span>(max_workers=<span class=\"literal\">None</span>, thread_name_prefix=<span class=\"string\">''</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>看官网中的<a href=\"https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example\">实例</a>，我们稍加改造：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> concurrent.futures <span class=\"keyword\">as</span> futures</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\">URLS = [<span class=\"string\">'http://www.baidu.com/'</span>,</span><br><span class=\"line\">        <span class=\"string\">'http://www.qq.com/'</span>,</span><br><span class=\"line\">        <span class=\"string\">'http://www.sina.com.cn/'</span>,</span><br><span class=\"line\">        <span class=\"string\">'http://www.sohu.com/'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Retrieve a single page and report the URL and contents</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">load_url</span>(<span class=\"params\">url, timeout</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> urllib.request.urlopen(url, timeout=timeout) <span class=\"keyword\">as</span> conn:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> conn.read()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 with 语句来确保及时清理线程</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> futures.ThreadPoolExecutor(max_workers=<span class=\"number\">5</span>) <span class=\"keyword\">as</span> executor:</span><br><span class=\"line\">    <span class=\"comment\"># 开启加载每个 future，并用它们的 URL 来标记 future</span></span><br><span class=\"line\">    future_to_url = {executor.submit(load_url, url, <span class=\"number\">60</span>): url <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> URLS}</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(futures.as_completed(future_to_url)))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> futures.as_completed(future_to_url):</span><br><span class=\"line\">        url = future_to_url[future]</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            data = future.result()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> exc:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">'%r generated an exception: %s'</span> % (url, exc))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">'%r page is %d bytes'</span> % (url, <span class=\"built_in\">len</span>(data)))</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"ProcessPoolExecutor\"><a href=\"#ProcessPoolExecutor\" class=\"headerlink\" title=\"ProcessPoolExecutor\"></a>ProcessPoolExecutor</h3><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProcessPoolExecutor</span>(max_workers=<span class=\"literal\">None</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>其继承自 <code>Executor</code>，于其行为几乎一致。但是在 <code>map()</code> 方法中，使用 <code>ProcessPoolExecutor</code> 时，此方法将迭代器切换为多个块，并将其作为单独的任务提交到池中。 可以通过将 <code>chunksize</code> 设置为正整数来指定这些块的（近似）大小。 对于非常长的迭代，使用较大的 <code>chunksize</code> 值可以显着提高性能，而默认大小为 <code>1</code>。使用 <code>ThreadPoolExecutor</code> 时，<code>chunksize</code> 无效。</p>\n<h3 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h3><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Future</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>它提供了如下方法（简单机翻一下￣ □ ￣｜｜）：</p>\n<ul>\n<li><p><code>cancel()</code><br>尝试取消调用。如果调用当前正在执行并且不能被取消，则该方法将返回 <code>False</code>，否则调用将被取消，并且该方法将返回 <code>True</code>。</p>\n</li>\n<li><p><code>cancelled()</code><br>如果调用成功取消，则返回 <code>True</code>。</p>\n</li>\n<li><p><code>running()</code><br>如果调用当前正在执行并且无法取消，则返回 <code>True</code>。</p>\n</li>\n<li><p><code>done()</code><br>如果调用成功取消或完成运行，则返回 <code>True</code>。</p>\n</li>\n<li><p><code>result(timeout=None)</code><br>返回调用返回的值。如果调用尚未完成，则此方法将等待到 timeout 秒。如果调用在 <code>timeout</code> 秒内没有完成，则将产生 <code>concurrent.futures.TimeoutError</code>。 <code>timeout</code> 可以是 <code>int</code> 或 <code>float</code>。如果未指定 <code>timeout</code> 或 <code>None</code>，则等待时间没有限制。<br>如果 future 在完成之前被取消，则抛出 <code>CancelledError</code> 错误。<br>如果这个调用在执行过程中抛出异常，这种方法也将引发相同的异常。</p>\n</li>\n<li><p><code>exception(timeout=None)</code><br>返回调用引发的异常。如果调用尚未完成，则此方法将等待到 <code>timeout</code> 秒。如果调用在 <code>timeout</code> 秒内没有完成，则将产生 <code>concurrent.futures.TimeoutError</code>。 <code>timeout</code> 可以是 <code>int</code> 或 <code>float</code>。如果未指定 <code>timeout</code> 或 <code>None</code>，则等待时间没有限制。<br>如果未来在完成之前被取消，则 <code>CancelledError</code> 将被提出。<br>如果调用在未提高的情况下完成，则返回 <code>None</code>。</p>\n</li>\n<li><p><code>add_done_callback(fn)</code><br>将可调用 fn 附加到未来。 fn 将被调用，将来作为其唯一的参数，当未来被取消或完成运行时。<br>添加的 <code>callables</code> 按它们被添加的顺序被调用，并且总是在属于添加它们的进程的线程中被调用。如果可调用引发了 <code>Exception</code> 子类，它将被记录并被忽略。如果可调用引发了 <code>BaseException</code> 子类，则该行为是未定义的。<br>如果未来已经完成或被取消，<code>fn</code> 将立即被调用。</p>\n</li>\n</ul>\n<h2 id=\"应用实例\"><a href=\"#应用实例\" class=\"headerlink\" title=\"应用实例\"></a>应用实例</h2><!--\n```python\ndef download_many(cc_list):\n    cc_list = cc_list[:5] ➊\n    with futures.ThreadPoolExecutor(max_workers=3) as executor: ➋\n        to_do = []\n        for cc in sorted(cc_list): ➌\n            future = executor.submit(download_one, cc) ➍\n            to_do.append(future) ➎\n            msg = 'Scheduled for {}: {}'\n            print(msg.format(cc, future)) ➏\n    results = []\n    for future in futures.as_completed(to_do): ➐\n        res = future.result() ➑\n        msg = '{} result: {!r}'\n        print(msg.format(future, res)) ➒\n        results.append(res)\n    return len(results)\n``` -->\n\n<p>综上，我们可以看到使用 <code>concurrent.future</code> 模块进行多线程、多进程编程会比用 <code>threading</code> 和 <code>multiprocessing</code> 简单许多。</p>\n<p>参见：</p>\n<ul>\n<li><a href=\"http://www.dongwm.com/archives/%E4%BD%BF%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-PoolExecutor%E7%AF%87/\">使用 Python 进行并发编程 - PoolExecutor 篇</a></li>\n</ul>\n","categories":["Python"],"tags":["Python","并发"]},{"title":"Python 库打包","url":"/posts/201807/2748.html","content":"<p>Python 有非常丰富的第三方库可以使用，很多开发者会向 pypi 上提交自己的 Python 包。要想向 pypi 包仓库提交自己开发的包，首先要将自己的代码打包，才能上传分发。Python 打包一般用到的库是 <code>setuptools</code>，下面我们重点来介绍 <code>setuptools</code> 的配置和使用。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">pip install setuptools</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"setup-py-文件\"><a href=\"#setup-py-文件\" class=\"headerlink\" title=\"setup.py 文件\"></a>setup.py 文件</h2><p>Python 库打包分发的关键在于编写 <code>setup.py</code> 文件。<code>setup.py</code> 文件编写的规则是从 <code>setuptools</code> 模块导入 setup 函数，并传入各类参数进行调用。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> setuptools <span class=\"keyword\">import</span> setup</span><br><span class=\"line\"></span><br><span class=\"line\">setup(</span><br><span class=\"line\">    name=<span class=\"string\">'demo'</span>,     <span class=\"comment\"># 包名字</span></span><br><span class=\"line\">    version=<span class=\"string\">'1.0'</span>,   <span class=\"comment\"># 包版本</span></span><br><span class=\"line\">    description=<span class=\"string\">'This is a test of the setup'</span>,   <span class=\"comment\"># 简单描述</span></span><br><span class=\"line\">    author=<span class=\"string\">'huoty'</span>,  <span class=\"comment\"># 作者</span></span><br><span class=\"line\">    author_email=<span class=\"string\">'sudohuoty@163.com'</span>,  <span class=\"comment\"># 作者邮箱</span></span><br><span class=\"line\">    url=<span class=\"string\">'https://www.konghy.com'</span>,      <span class=\"comment\"># 包的主页</span></span><br><span class=\"line\">    packages=[<span class=\"string\">'demo'</span>],                 <span class=\"comment\"># 包</span></span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"参数概述\"><a href=\"#参数概述\" class=\"headerlink\" title=\"参数概述\"></a>参数概述</h3><p>在 <code>setup()</code> 函数参数中，一部分是用来描述包的元信息；一部分用来定义了包运行的设置信息：</p>\n<span id=\"more\"></span>\n<p><strong>元信息</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> name</td>\n<td> 包名称</td>\n</tr>\n<tr>\n<td> version</td>\n<td> 包版本</td>\n</tr>\n<tr>\n<td> author</td>\n<td> 程序的作者</td>\n</tr>\n<tr>\n<td> author_email</td>\n<td> 程序的作者的邮箱地址</td>\n</tr>\n<tr>\n<td> maintainer</td>\n<td> 维护者</td>\n</tr>\n<tr>\n<td> maintainer_email</td>\n<td> 维护者的邮箱地址</td>\n</tr>\n<tr>\n<td> url</td>\n<td> 程序的官网地址</td>\n</tr>\n<tr>\n<td> license</td>\n<td> 程序的授权信息</td>\n</tr>\n<tr>\n<td> description</td>\n<td> 程序的简单描述</td>\n</tr>\n<tr>\n<td> long_description</td>\n<td> 程序的详细描述</td>\n</tr>\n<tr>\n<td> platforms</td>\n<td> 程序适用的软件平台列表</td>\n</tr>\n<tr>\n<td> classifiers</td>\n<td> 程序的所属分类列表</td>\n</tr>\n<tr>\n<td> keywords</td>\n<td> 程序的关键字列表</td>\n</tr>\n<tr>\n<td> download_url</td>\n<td> 程序的下载地址</td>\n</tr>\n</tbody></table>\n<p><strong>设置信息</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> packages</td>\n<td> 需要处理的包目录 (通常为包含 <code>__init__.py</code> 的文件夹)</td>\n</tr>\n<tr>\n<td>py_modules</td>\n<td> 需要打包的 Python 单文件列表</td>\n</tr>\n<tr>\n<td> cmdclass</td>\n<td> 添加自定义命令</td>\n</tr>\n<tr>\n<td> package_data</td>\n<td> 指定包内需要包含的数据文件</td>\n</tr>\n<tr>\n<td> include_package_data</td>\n<td> 自动包含包内所有受版本控制 (cvs/svn/git) 的数据文件</td>\n</tr>\n<tr>\n<td> exclude_package_data</td>\n<td> 当 <code>include_package_data</code> 为 <code>True</code> 时该选项用于排除部分文件</td>\n</tr>\n<tr>\n<td> data_files</td>\n<td> 打包时需要打包的数据文件，如图片，配置文件等</td>\n</tr>\n<tr>\n<td> ext_modules</td>\n<td> 指定扩展模块</td>\n</tr>\n<tr>\n<td> scripts</td>\n<td> 指定可执行脚本，安装时脚本会被安装到系统 PATH 路径下</td>\n</tr>\n<tr>\n<td> package_dir</td>\n<td> 指定哪些目录下的文件被映射到哪个源码包</td>\n</tr>\n<tr>\n<td> requires</td>\n<td> 指定依赖的其他包</td>\n</tr>\n<tr>\n<td> provides</td>\n<td> 指定可以为哪些模块提供依赖</td>\n</tr>\n<tr>\n<td> install_requires</td>\n<td> 安装时需要安装的依赖包</td>\n</tr>\n<tr>\n<td> entry_points</td>\n<td> 动态发现服务和插件，下面详细讲</td>\n</tr>\n<tr>\n<td> setup_requires</td>\n<td> 指定运行 setup.py 文件本身所依赖的包</td>\n</tr>\n<tr>\n<td> dependency_links</td>\n<td> 指定依赖包的下载地址</td>\n</tr>\n<tr>\n<td> extras_require</td>\n<td> 当前包的高级 / 额外特性需要依赖的分发包</td>\n</tr>\n<tr>\n<td> zip_safe</td>\n<td> 不压缩包，而是以目录的形式安装</td>\n</tr>\n</tbody></table>\n<h3 id=\"参数详解\"><a href=\"#参数详解\" class=\"headerlink\" title=\"参数详解\"></a>参数详解</h3><p>像 <code>name</code>、<code>version</code> 等定义包的元信息，这些没有什么好说的，下面我们介绍几个与代码执行相关的几个参数：</p>\n<h4 id=\"packages-与-find-packages\"><a href=\"#packages-与-find-packages\" class=\"headerlink\" title=\"packages 与 find_packages()\"></a><code>packages</code> 与 <code>find_packages()</code></h4><p>定义了需要处理的包的目录，这通常为包含 <code>__init__.py</code> 的文件夹。对于简单工程来说，手动增加 <code>packages</code> 参数是容易。而对于复杂的工程来说，可能添加很多的包，这是手动添加就变得麻烦。setuptools 模块提供了一个 <code>find_packages()</code> 函数，它默认在与<code> setup.py</code> 文件同一目录下搜索各个含有 <code>__init__.py</code> 的目录做为要添加的包。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">find_packages(where=<span class=\"string\">'.'</span>, exclude=(), include=(<span class=\"string\">'*'</span>,))</span><br></pre></td></tr></tbody></table></figure>\n<p>find_packages 函数的第一个参数用于指定在哪个目录下搜索包，参数 <code>exclude</code> 用于指定排除哪些包，参数 <code>include</code> 指出要包含的包。</p>\n<p>默认默认情况下 <code>setup.py</code> 文件只在其所在的目录下搜索包。如果不用 find_packages，想要找到其他目录下的包，也可以设置 package_dir 参数，其指定哪些目录下的文件被映射到哪个源码包，如: <code>package_dir={'': 'src'}</code> 表示 “root package” 中的模块都在 <code>src</code> 目录中。</p>\n<h4 id=\"包含数据文件\"><a href=\"#包含数据文件\" class=\"headerlink\" title=\"包含数据文件\"></a>包含数据文件</h4><p><strong>package_data</strong><br>该参数是一个从包名称到 glob 模式列表的字典。如果数据文件包含在包的子目录中，则 glob 可以包括子目录名称。其格式一般为 <code>{'package_name': ['files']}</code>，比如：<code>package_data={'mypkg': ['data/*.dat'],}</code>。</p>\n<p><strong>include_package_data</strong><br>该参数被设置为 True 时自动添加包中受版本控制的数据文件，可替代 package_data，同时，exclude_package_data 可以排除某些文件。注意当需要加入没有被版本控制的文件时，还是仍然需要使用 package_data 参数才行。</p>\n<p><strong>data_files</strong><br>该参数通常用于包含不在包内的数据文件，即包的外部文件，如：配置文件，消息目录，数据文件。其指定了一系列二元组，即 (目的安装目录，源文件) ，表示哪些文件被安装到哪些目录中。如果目录名是相对路径，则相对于安装前缀进行解释。</p>\n<p><strong>manifest template</strong>:<br>manifest template 即编写 <code>MANIFEST.in</code> 文件，文件内容就是需要包含在分发包中的文件。一个 MANIFEST.in 文件如下：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">include *.txt</span><br><span class=\"line\">recursive-include examples *.txt *.py</span><br><span class=\"line\">prune examples/sample?/build</span><br></pre></td></tr></tbody></table></figure>\n<p>MANIFEST.in 文件的编写规则可参考：<a href=\"https://docs.python.org/3.6/distutils/sourcedist.html\">https://docs.python.org/3.6/distutils/sourcedist.html</a></p>\n<h4 id=\"生成脚本\"><a href=\"#生成脚本\" class=\"headerlink\" title=\"生成脚本\"></a>生成脚本</h4><p>有两个参数 <code>scripts</code> 参数或 <code>console_scripts</code> 可用于生成脚本。</p>\n<p><code>entry_points</code> 参数用来支持自动生成脚本，其值是一个字典或者 <code>*.ini</code> 格式的字符串，从 <code>entry_point</code> 组名映射到一个表示 <code>entry_point</code> 的字符串或字符串列表，如：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">setup(</span><br><span class=\"line\">    <span class=\"comment\"># other arguments here...</span></span><br><span class=\"line\">    entry_points=<span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        [console_scripts]: </span></span><br><span class=\"line\"><span class=\"string\">        foo=foo.entry:main</span></span><br><span class=\"line\"><span class=\"string\">        bar=foo.entry:main</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">setup(</span><br><span class=\"line\">    <span class=\"comment\"># other arguments here...</span></span><br><span class=\"line\">    entry_points={</span><br><span class=\"line\">        <span class=\"string\">'console_scripts'</span>: [</span><br><span class=\"line\">            <span class=\"string\">'foo = my_package.some_module:main_func'</span>,</span><br><span class=\"line\">            <span class=\"string\">'bar = other_module:some_func'</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">'gui_scripts'</span>: [</span><br><span class=\"line\">            <span class=\"string\">'baz = my_package_gui:start_func'</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    }</span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n<p><code>scripts</code> 参数是一个列表，安装包时在该参数中列出的文件会被安装到系统 <code>PATH</code> 路径下。如：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scripts=[<span class=\"string\">'bin/foo.sh'</span>, <span class=\"string\">'bar.py'</span>]</span><br></pre></td></tr></tbody></table></figure>\n\n<p>用如下方法可以将脚本重命名，例如去掉脚本文件的扩展名 (.py、.sh):</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> setuptools.command.install_scripts <span class=\"keyword\">import</span> install_scripts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">InstallScripts</span>(<span class=\"title class_ inherited__\">install_scripts</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        setuptools.command.install_scripts.install_scripts.run(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Rename some script files</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> script <span class=\"keyword\">in</span> self.get_outputs():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> basename.endswith(<span class=\"string\">\".py\"</span>) <span class=\"keyword\">or</span> basename.endswith(<span class=\"string\">\".sh\"</span>):</span><br><span class=\"line\">                dest = script[:-<span class=\"number\">3</span>]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"moving %s to %s\"</span> % (script, dest))</span><br><span class=\"line\">            shutil.move(script, dest)</span><br><span class=\"line\"></span><br><span class=\"line\">setup(</span><br><span class=\"line\">    <span class=\"comment\"># other arguments here...</span></span><br><span class=\"line\">    cmdclass={</span><br><span class=\"line\">        <span class=\"string\">\"install_scripts\"</span>: InstallScripts</span><br><span class=\"line\">    }</span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n<p><code>其中，cmdclass</code> 参数表示自定制命令，后文详述。</p>\n<h4 id=\"ext-modules\"><a href=\"#ext-modules\" class=\"headerlink\" title=\"ext_modules\"></a>ext_modules</h4><p>ext_modules 参数用于构建 C 和 C++ 扩展扩展包。其是 Extension 实例的列表，每一个 Extension 实例描述了一个独立的扩展模块，扩展模块可以设置扩展包名，头文件、源文件、链接库及其路径、宏定义和编辑参数等。如：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">setup(</span><br><span class=\"line\">    # other arguments here...</span><br><span class=\"line\">    ext_modules=[</span><br><span class=\"line\">        Extension('foo',</span><br><span class=\"line\">                  glob(path.join(here, 'src', '*.c')),</span><br><span class=\"line\">                  libraries = [ 'rt' ],</span><br><span class=\"line\">                  include_dirs=[numpy.get_include()])</span><br><span class=\"line\">    ]</span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n<p>详细了解可参考：<a href=\"https://docs.python.org/3.6/distutils/setupscript.html#preprocessor-options\">https://docs.python.org/3.6/distutils/setupscript.html#preprocessor-options</a></p>\n<h4 id=\"zip-safe\"><a href=\"#zip-safe\" class=\"headerlink\" title=\"zip_safe\"></a>zip_safe</h4><p>zip_safe 参数决定包是否作为一个 zip 压缩后的 egg 文件安装，还是作为一个以 .egg 结尾的目录安装。因为有些工具不支持 zip 压缩文件，而且压缩后的包也不方便调试，所以建议将其设为 False，即 zip_safe=False。</p>\n<h4 id=\"自定义命令\"><a href=\"#自定义命令\" class=\"headerlink\" title=\"自定义命令\"></a>自定义命令</h4><p>Setup.py 文件有很多内置的的命令，可以使用 python setup.py –help-commands 查看。如果想要定制自己需要的命令，可以添加 cmdclass 参数，其值为一个 dict。实现自定义命名需要继承 setuptools.Command 或者 distutils.core.Command 并重写 run 方法。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> setuptools <span class=\"keyword\">import</span> setup, Command</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">InstallCommand</span>(<span class=\"title class_ inherited__\">Command</span>):</span><br><span class=\"line\">    description = <span class=\"string\">\"Installs the foo.\"</span></span><br><span class=\"line\">    user_options = [</span><br><span class=\"line\">        (<span class=\"string\">'foo='</span>, <span class=\"literal\">None</span>, <span class=\"string\">'Specify the foo to bar.'</span>),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">initialize_options</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.foo = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">finalize_options</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> self.foo <span class=\"keyword\">in</span> (<span class=\"literal\">None</span>, <span class=\"string\">'myFoo'</span>, <span class=\"string\">'myFoo2'</span>), <span class=\"string\">'Invalid foo!'</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        install_all_the_things()</span><br><span class=\"line\"></span><br><span class=\"line\">setup(</span><br><span class=\"line\">    ...,</span><br><span class=\"line\">    cmdclass={</span><br><span class=\"line\">        <span class=\"string\">'install'</span>: InstallCommand,</span><br><span class=\"line\">    }</span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n<p>依赖关系<br>如果包依赖其他的包，可以指定 install_requires 参数，其值为一个 list，如：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">install_requires=[</span><br><span class=\"line\">    'requests&gt;=1.0',</span><br><span class=\"line\">    'flask&gt;=1.0'</span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure>\n<p>指定该参数后，在安装包时会自定从 pypi 仓库中下载指定的依赖包安装。</p>\n<p>此外，还支持从指定链接下载依赖，即指定 dependency_links 参数，如：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">dependency_links = [</span><br><span class=\"line\">    \"http://packages.example.com/snapshots/foo-1.0.tar.gz\",</span><br><span class=\"line\">    \"http://example2.com/p/bar-1.0.tar.gz\",</span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure>\n<p>分类信息<br>classifiers 参数说明包的分类信息。所有支持的分类列表见：<a href=\"https://pypi.org/pypi?:action=list_classifiers\">https://pypi.org/pypi?%3Aaction=list_classifiers</a></p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">classifiers = [</span><br><span class=\"line\">    <span class=\"comment\"># 发展时期,常见的如下</span></span><br><span class=\"line\">    <span class=\"comment\">#   3 - Alpha</span></span><br><span class=\"line\">    <span class=\"comment\">#   4 - Beta</span></span><br><span class=\"line\">    <span class=\"comment\">#   5 - Production/Stable</span></span><br><span class=\"line\">    <span class=\"string\">'Development Status :: 3 - Alpha'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 开发的目标用户</span></span><br><span class=\"line\">    <span class=\"string\">'Intended Audience :: Developers'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 属于什么类型</span></span><br><span class=\"line\">    <span class=\"string\">'Topic :: Software Development :: Build Tools'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 许可证信息</span></span><br><span class=\"line\">    <span class=\"string\">'License :: OSI Approved :: MIT License'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 目标 Python 版本</span></span><br><span class=\"line\">    <span class=\"string\">'Programming Language :: Python :: 2'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Programming Language :: Python :: 2.7'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Programming Language :: Python :: 3'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Programming Language :: Python :: 3.3'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Programming Language :: Python :: 3.4'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Programming Language :: Python :: 3.5'</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"setup-cfg-文件\"><a href=\"#setup-cfg-文件\" class=\"headerlink\" title=\"setup.cfg 文件\"></a>setup.cfg 文件</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"附注\"><a href=\"#附注\" class=\"headerlink\" title=\"附注\"></a>附注</h2><p>可以看到，setup.py 的编写是非常麻烦的，kennethreitz 大神专门为此开了个 <a href=\"https://github.com/kennethreitz/setup.py\">Github: A Human’s Ultimate Guide to setup.py</a>，可以以此为模板，编写自己的 setup.py 文件。</p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://setuptools.readthedocs.io/en/latest/\">setuptools 文档</a></li>\n<li><a href=\"http://blog.konghy.cn/2018/04/29/setup-dot-py/\">Python 库打包分发 (setup.py 编写) 简易指南</a></li>\n<li><a href=\"http://python.jobbole.com/87240/\">Python 打包分发工具 setuptools 简介</a></li>\n</ul>\n","categories":["Python"],"tags":["Python","打包"]},{"title":"Python 库推荐","url":"/posts/201807/29269.html","content":"<p><a href=\"https://github.com/bcj/AttrDict\">AttrDict</a><br>字典转换为可以用属性访问的模式</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">from</span> attrdict <span class=\"keyword\">import</span> AttrDict</span><br><span class=\"line\">&gt; a = AttrDict({<span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>})</span><br><span class=\"line\">&gt; a.foo</span><br><span class=\"line\"><span class=\"string\">'bar'</span></span><br><span class=\"line\">&gt; a[<span class=\"string\">'foo'</span>]</span><br><span class=\"line\"><span class=\"string\">'bar'</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"Web-框架\"><a href=\"#Web-框架\" class=\"headerlink\" title=\"Web 框架\"></a>Web 框架</h2><p><a href=\"https://github.com/Bogdanp/molten\">molten</a>: 用于使用 Python 3.6 及更高版本构建 HTTP API 的最小，可扩展，快速且高效的框架。<br><a href=\"https://github.com/kennethreitz/responder\">responder</a>: </p>\n<h3 id=\"Flask\"><a href=\"#Flask\" class=\"headerlink\" title=\"Flask\"></a>Flask</h3><h3 id=\"Sanic\"><a href=\"#Sanic\" class=\"headerlink\" title=\"Sanic\"></a>Sanic</h3><p><a href=\"https://github.com/channelcat/sanic\"><img src=\"https://img.shields.io/github/stars/channelcat/sanic.svg\" alt=\"GitHub stars\"></a></p>\n<h3 id=\"Vibora\"><a href=\"#Vibora\" class=\"headerlink\" title=\"Vibora\"></a>Vibora</h3><p><a href=\"https://github.com/vibora-io/vibora\"><img src=\"https://img.shields.io/github/stars/badges/shields.svg?style=social&amp;label=Stars\" alt=\"GitHub stars\"></a></p>\n<h2 id=\"实用工具\"><a href=\"#实用工具\" class=\"headerlink\" title=\"实用工具\"></a>实用工具</h2><p><a href=\"https://github.com/soimort/you-get\">You-Get</a>: 优酷、YouTube 等网站视频下载</p>\n<p><a href=\"https://github.com/iawia002/lulu\">lulu</a>: 各网站视频下载，fork 自 you-get。其作者新开 Go 语言编写同功能库 <a href=\"https://github.com/iawia002/annie\">annie</a>。</p>\n<h2 id=\"代码调试\"><a href=\"#代码调试\" class=\"headerlink\" title=\"代码调试\"></a>代码调试</h2><p><a href=\"https://github.com/gruns/icecream\">icecream</a>：打印调试，优化 <code>print()</code> 函数。</p>\n<h2 id=\"数据验证\"><a href=\"#数据验证\" class=\"headerlink\" title=\"数据验证\"></a>数据验证</h2><p><a href=\"https://github.com/alecthomas/voluptuous\">voluptuous</a>：数据验证库 <a href=\"(https://github.com/alecthomas/voluptuous\"><img src=\"https://img.shields.io/github/stars/badges/shields.svg?style=social&amp;label=Stars\" alt=\"GitHub stars\"></a></p>\n<h2 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h2><p><a href=\"https://github.com/xonsh/xonsh\">xonsh</a>:  xonsh 是一种 shell 语言和命令提示符。 与其他 shell 不同，xonsh 基于 Python，添加了额外的语法，可以轻松调用子进程命令，操作环境和处理文件系统。 xonsh 命令提示符为用户提供对 xonsh 语言的交互式访问。</p>\n","categories":["Python"],"tags":["Python"]},{"title":"Python 进度条神器 tqdm","url":"/posts/201807/46192.html","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">pip install tqdm</span><br></pre></td></tr></tbody></table></figure>\n\n<p>演示：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tqdm(<span class=\"built_in\">range</span>(<span class=\"number\">10000</span>)):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></tbody></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\">text = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> tqdm([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>]):</span><br><span class=\"line\">    text = text + char</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> trange</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trange(<span class=\"number\">100</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\">pbar = tqdm([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> pbar:</span><br><span class=\"line\">    pbar.set_description(<span class=\"string\">\"Processing %s\"</span> % char)</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\"><span class=\"keyword\">with</span> tqdm(total=<span class=\"number\">100</span>) <span class=\"keyword\">as</span> pbar:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        pbar.update(<span class=\"number\">10</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> tqdm <span class=\"keyword\">import</span> tqdm</span><br><span class=\"line\">pbar = tqdm(total=<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    pbar.update(<span class=\"number\">10</span>)</span><br><span class=\"line\">pbar.close()</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n","categories":["Python"],"tags":["Python"]},{"title":"Python 魔术方法之 __call__","url":"/posts/201807/28705.html","content":"<p>在 Python 中一切皆对象，就是否能通过函数操作符 <code>()</code> 来调用，我们可将对象分为可调用对象和不可调用对象。我们通过 <code>def</code> 自定义的函数是可调用对象；一般情况下，类的实例不是可调用对象。可以用内置函数 <code>callable()</code> 来检测目标是否可调用：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>: <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">callable</span>(Test)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">hasattr</span>(Test, <span class=\"string\">'__call__'</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = Test()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">callable</span>(t)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t()</span><br><span class=\"line\">TypeError: <span class=\"string\">'Test'</span> <span class=\"built_in\">object</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"built_in\">callable</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(): <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">callable</span>(func)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">dir</span>(func)</span><br><span class=\"line\">[...more...,__call__,...more...]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">dir</span>(func.__call__)</span><br><span class=\"line\">[...more...,__call__,...more...]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<span id=\"more\"></span>\n\n<p>我们看到 <code>Test</code> 的实例 <code>t</code> 是不可调用的。</p>\n<p>我们知道 Python 提供了许多的魔术方法。Python 中有一个魔术方法 <code>__call__</code>，当我们调用 <code>x()</code> 实际上与 <code>x.__call__()</code> 是相同的。那么我们是否可以通过给类定义 <code>__call__</code> 方法，来实现类的实例可调用呢？答案是可以的。上述 <code>t()</code> 之所以错误是因为：</p>\n<pre><code>默认情况下，类中的 `__call__` 方法是没有实现的。\n</code></pre>\n<p><code>__call__</code> 在那些类的实例经常改变状态的时候会非常有效。调用这个实例是一种改变这个对象状态的直接和优雅的做法。下面用一个实例来说明:</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Entity</span>:</span><br><span class=\"line\"><span class=\"string\">'''调用实体来改变实体的位置。'''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, size, x, y</span>):</span><br><span class=\"line\">    self.x, self.y = x, y</span><br><span class=\"line\">    self.size = size</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">__call__</span>(<span class=\"params\">self, x, y</span>):</span><br><span class=\"line\">    <span class=\"string\">'''改变实体的位置'''</span></span><br><span class=\"line\">    self.x, self.y = x, y</span><br></pre></td></tr></tbody></table></figure>\n\n<p>此种方法在用类定义装饰器时非常有用。<br>其他魔术方法见参考资料。<br>参见：</p>\n<ul>\n<li><a href=\"http://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/a-guide-to-pythons-magic-methods.html\">Python 魔术方法指南</a></li>\n</ul>\n","categories":["Python"],"tags":["Python","魔术方法"]},{"title":"Python 中的协程","url":"/posts/201807/47856.html","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Python 3.5 之前的协程是靠 <code>yield</code> 实现的，和生成器 <code>yield</code> 共用关键字，语义不明确，使用比较晦涩，很少有人使用（起码大多数爬虫程序用的是多线程）。Python 3.5 增加了 <code>async</code> 和 <code>await</code> 关键字（保留关键字，未正式确定，Python 3.7 正式确定），作为定义协程的专用关键字。协程才正式变得优雅可用，不过它的基础仍是基于 <code>yield</code> 的协程。作为基础，我们对其做一下简述。</p>\n<h2 id=\"与生成器的不同\"><a href=\"#与生成器的不同\" class=\"headerlink\" title=\"与生成器的不同\"></a>与生成器的不同</h2><p>协程、线程、进程的区别不在赘述。简述协程和生成器的区别：</p>\n<ul>\n<li>生成器是用于生成供迭代的数据</li>\n<li>协程是数据的消费者</li>\n<li>虽然在协程中会使用 <code>yield</code> 产生值，但这与迭代无关。</li>\n</ul>\n<p>也就是说，协程只是和生成器 “碰巧” 共用了 <code>yield</code> 关键词，其他无任何关联。</p>\n<h2 id=\"协程基础\"><a href=\"#协程基础\" class=\"headerlink\" title=\"协程基础\"></a>协程基础</h2><p>下面我们来分析下《流畅的 Python》中协程的一个例子：</p>\n<h3 id=\"简单实例\"><a href=\"#简单实例\" class=\"headerlink\" title=\"简单实例\"></a>简单实例</h3><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">simple_coroutine</span>():     <span class=\"comment\"># ①</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(<span class=\"string\">'-&gt; 协程开始'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>    x = <span class=\"keyword\">yield</span>               <span class=\"comment\"># ②</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(<span class=\"string\">'-&gt; 协程接收：'</span>, x)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_coro = simple_coroutine()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_coro                      <span class=\"comment\"># ③</span></span><br><span class=\"line\">&lt;generator <span class=\"built_in\">object</span> simple_coroutine at <span class=\"number\">0x0000023E1AC54150</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(my_coro)                <span class=\"comment\"># ④</span></span><br><span class=\"line\">-&gt; 协程开始</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_coro.send(<span class=\"number\">42</span>)             <span class=\"comment\"># ⑤</span></span><br><span class=\"line\">-&gt; 协程接收： <span class=\"number\">42</span></span><br><span class=\"line\">Traceback (most recent call last):   <span class=\"comment\"># ⑥</span></span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">StopIteration</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>① 协程使用生成器函数定义：定义体重有 <code>yield</code> 关键字。</li>\n<li>④ 首选要调用 <code>next(...)</code> 函数，因为生成器还没有启动，没在 <code>yield</code> 语句处暂停，所以一开始发送数据。也可以用给生成器发送 <code>None</code> 代替：<code>my_coro,send(None)</code>，专业术语叫<strong>预激生成器</strong>。</li>\n</ul>\n<p>可用 <code>inspect.getgeneratorstate(...)</code> 查看协程状态：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\">inspect.getgeneratorstate(...)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>具体有协程从创建到结束有四种状态：</p>\n<ul>\n<li><code>GEN_CREATED</code>: 等待执行</li>\n<li><code>GEN_RUNNING</code>: 解析器正在执行</li>\n<li><code>GEN_SUSPENDED</code>: 在 <code>yield</code> 表达式出暂停执行</li>\n<li><code>GEN_CLOSED</code>: 执行结束</li>\n</ul>\n<p>只有在多线程应用中才能看到 <code>GEN_RUNNING</code> 状态。此外，生成器对象在自己身上调用 <code>getgeneratorstate</code> 函数能看到，可自行测试。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"预激协程\"><a href=\"#预激协程\" class=\"headerlink\" title=\"预激协程\"></a>预激协程</h3><p>为了方便预激协程，《流畅的 Python》提供了一个预激协程的装饰器例子，可供参考：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> wraps</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">coroutine</span>(<span class=\"params\">func</span>):</span><br><span class=\"line\">    <span class=\"string\">\"\"\"装饰器：向前执行到第一个 `yield` 表达式，预激 `func`\"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">    @wraps(<span class=\"params\">func</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">primer</span>(<span class=\"params\">*args, **kwargs</span>):</span><br><span class=\"line\">        gen = func(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"built_in\">next</span>(gen)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gen</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> primer</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"终止协程和异常处理\"><a href=\"#终止协程和异常处理\" class=\"headerlink\" title=\"终止协程和异常处理\"></a>终止协程和异常处理</h3><p>在协程中，未处理的异常能导致协程终止<br>Python 也为协程提供两个方法：</p>\n<ul>\n<li><code>generator.throw(exc_type[, exc_value[, traceback]])</code>：致使生成器在暂停 <code>yield</code> 表达式处抛出<strong>指定</strong>的异常。如果生成器处理了抛出的异常，代码会向前执行到下一个 <code>yield</code> 表达式，而产生的值会调用 <code>generator.throw</code> 方法得到返回值。如果生成器没有处理抛出的异常，异常会向上冒泡，传到调用方的上下文中。</li>\n<li><code>generator.close()</code>：只是生成器在暂停的 <code>yield</code> 表达式处抛出 <code>GeneratorExit</code> 异常。</li>\n</ul>\n<h3 id=\"让协程返回值\"><a href=\"#让协程返回值\" class=\"headerlink\" title=\"让协程返回值\"></a>让协程返回值</h3><p><code>return</code> 可以出现在生成器中，当生成器正常结束，执行 <code>return</code>。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test</span>():</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        a = <span class=\"keyword\">yield</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> a == <span class=\"number\">10</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = test()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t.send(<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t.send(<span class=\"number\">10</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">StopIteration: <span class=\"number\">10</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>t = test()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>inspect.getgeneratorstate(t)</span><br><span class=\"line\"><span class=\"string\">'GEN_CREATED'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">next</span>(t)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>inspect.getgeneratorstate(t)</span><br><span class=\"line\"><span class=\"string\">'GEN_SUSPENDED'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">try</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>    t.send(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">except</span> StopIteration <span class=\"keyword\">as</span> exc:</span><br><span class=\"line\"><span class=\"meta\">... </span>    result = exc.value</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>result</span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"实例分析\"><a href=\"#实例分析\" class=\"headerlink\" title=\"实例分析\"></a>实例分析</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">simple_coro</span>(<span class=\"params\">a</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'-&gt; 开始: a ='</span>, a)</span><br><span class=\"line\">    b = <span class=\"keyword\">yield</span> a                 <span class=\"comment\"># ①</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'-&gt; 接收: b ='</span>, b)</span><br><span class=\"line\">    c = <span class=\"keyword\">yield</span> a + b             <span class=\"comment\"># ②</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'-&gt; 接收：c ='</span>, c)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>调用：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>coro = simple_coro(<span class=\"number\">14</span>)  <span class=\"comment\"># 创建协程</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r1 = coro.send(<span class=\"literal\">None</span>)    <span class=\"comment\"># 或执行：next(coro)，启动协程</span></span><br><span class=\"line\">-&gt; 开始: a = <span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r1</span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"comment\"># 协程执行至，① 行 yield 右边，返回 yield 右边表达式的值，</span></span><br><span class=\"line\"><span class=\"comment\"># 并等待 send 发送新值，赋值给 b</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r2 = coro.send(<span class=\"number\">28</span>)</span><br><span class=\"line\">-&gt; 接收: b = <span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r2</span><br><span class=\"line\"><span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r3 = coro.send(<span class=\"number\">99</span>)</span><br><span class=\"line\">-&gt; 接收：c = <span class=\"number\">99</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">StopIteration</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r3</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">NameError: name <span class=\"string\">'r3'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</span><br></pre></td></tr></tbody></table></figure>\n\n<p>从上述分析中我们看到，<code>yield</code> 的作用，不严谨的说是：</p>\n<ol>\n<li>协程在 <code>yield</code> 关键字所在位置暂停执行；</li>\n<li>当协程执行至此 <code>yield</code> 处时，返回 <code>yield</code> 右边表达式的值，并等待 <code>send</code> 函数发送下一个值给 <code>yield</code> 左边的变量；</li>\n<li>每一次 <code>coroutine.send(value)</code> 执行的范围为：<code>yield</code> 语句行左边变量赋值至下一个 <code>yield</code> 语句行右边表达式返回值或协程结束。</li>\n</ol>\n<p>如上述协程 <code>coro.send(28)</code> 的执行范围为：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">_________</span><br><span class=\"line\">|    b = |_______________________</span><br><span class=\"line\">|    <span class=\"built_in\">print</span>(<span class=\"string\">'-&gt; 接收: b ='</span>, b)  </span><br><span class=\"line\">¯¯¯¯¯¯¯¯¯¯| <span class=\"keyword\">yield</span> a + b  <span class=\"comment\"># 相当于 return a +b，然后暂停</span></span><br><span class=\"line\">          ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"yield-from\"><a href=\"#yield-from\" class=\"headerlink\" title=\"yield from\"></a>yield from</h2><p>基础概念：</p>\n<ul>\n<li>委派生成器：包含 <code>yield from &lt;iterable&gt;</code> 表达式的生成器函数。</li>\n<li>子生成器：从 <code>yield from</code> 表达式中 <code>&lt;iterable&gt;</code> 部分获取的生成器（subgenerator）。</li>\n<li>调用方：调用委派生成器的客户端代码。</li>\n</ul>\n","categories":["Python"],"tags":["Python","协程"]},{"title":"Python 中的多重继承","url":"/posts/201806/8310.html","content":"<p>节选自：《流畅的 Python》</p>\n<p>环境：<code>Python 3.6</code></p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>: <span class=\"comment\"># 默认继承自 object</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">ping</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">'ping:'</span>, self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>(<span class=\"title class_ inherited__\">A</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pong</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">'pong:'</span>, self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>(<span class=\"title class_ inherited__\">A</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pong</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">'PONG:'</span>, self)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span>(B, C):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">ping</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().ping()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">'post-ping: '</span>, self)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pingpong</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.ping()</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().ping()</span><br><span class=\"line\">        self.pong()</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().pong()</span><br><span class=\"line\">        C.pong(self)</span><br></pre></td></tr></tbody></table></figure>\n\n<span id=\"more\"></span>\n\n<p><code>B</code> 和 <code>C</code> 都实现了 <code>pong</code> 方法，只是输出结果不一样。那么在 <code>D</code> 的实例上调用 <code>pong</code> 方法，我们运行的是哪一个 <code>pong</code> 方法呢？</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = D()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.pong()  <span class=\"comment\"># ①</span></span><br><span class=\"line\">pong: &lt;__main__.D <span class=\"built_in\">object</span> at <span class=\"number\">0x000001B4167C10F0</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>C.pong(d) <span class=\"comment\"># ②</span></span><br><span class=\"line\">PONG: &lt;__main__.D <span class=\"built_in\">object</span> at <span class=\"number\">0x000001B4167C10F0</span>&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>① 直接调用 <code>d.pong()</code> 运行的是 <code>B</code> 类中的版本。</li>\n<li>② 超类中的方法都可以直接调用，注意此时要把实例作为显示参数传入（因为我们定义的不是 类方法，没有用 <code>@classmethod</code> 装饰器修饰，所以用类调用时，必须显示传入给 <code>self</code> 参数传入实例）。</li>\n</ul>\n<p>对于 ①，Python 能区分 <code>d.pong()</code> 调用的哪个类方法，是因为 Python 会按照特定的顺序便利继承图。这个顺序叫<strong>方法解析顺序</strong> (Method Resolution Order, MRO)。类都有一个名为 <code>__mro__</code> 的属性，它的值是一个元组，按照方法解析顺序列出各个超类（或父类），从当前类<strong>自下而上，自左而右</strong>，直到 <code>object</code> 类。 <code>D</code> 类的 <code>__mro__</code> 属性如下：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; D.__mro__</span><br><span class=\"line\">(__main__.D, __main__.B, __main__.C, __main__.A, object)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>若想把方法调用委托给超类，推荐的方式是使用内置的 <code>super()</code> 函数（注意: Python 3 和 Python 2 中 <code>super()</code> 使用上有细微差别）。然而，有时可能需要绕过方法解析顺序，直接调用某个超类的方法 – 这样做有时更方便。例如，<code>D.ping</code> 方法可以这样写：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span>(B, C):</span><br><span class=\"line\"></span><br><span class=\"line\">    ... ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">ping</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        A.ping(self)</span><br><span class=\"line\">        pring(<span class=\"string\">'post-ping:'</span>, self)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>注意，直接在类上调用实例方法时，必须显示传入 <code>self</code> 参数，因为这样访问的是未绑定方法（unbound method）。</p>\n<p>然而，使用 <code>super()</code> 最安全，也不易过时。调用框架或不受自己控制的类层次结构中的方法，尤其适合使用 <code>super()</code>。 使用 <code>super()</code> 调用方法时，会遵守方法的解析顺序，如：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.ping() <span class=\"comment\"># ①</span></span><br><span class=\"line\">ping: &lt;__main__.D <span class=\"built_in\">object</span> at <span class=\"number\">0x000001B4167C10F0</span>&gt; <span class=\"comment\"># ②</span></span><br><span class=\"line\">post-ping:  &lt;__main__.D <span class=\"built_in\">object</span> at <span class=\"number\">0x000001B4167C10F0</span>&gt; <span class=\"comment\"># ③</span></span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>① <code>D</code> 类的 <code>ping</code> 方法做了两次调用。</li>\n<li>② 第一个调用的是 <code>super().ping()</code>；<code>super</code> 函数把 <code>ping</code> 调用委托给了 <code>A</code> 类；这行由 <code>A.ping</code> 输出。</li>\n<li>③ 第二个调用的是 <code>pring('post-ping:', self)</code>，输出的是这一行。</li>\n</ul>\n<p>下面看一下， <code>D</code> 实例上调用 <code>pingpong</code> 方法得到的结果：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.pingpong()</span><br><span class=\"line\">ping: &lt;__main__.D <span class=\"built_in\">object</span> at <span class=\"number\">0x000001B4167C10F0</span>&gt; <span class=\"comment\"># ①</span></span><br><span class=\"line\">post-ping:  &lt;__main__.D <span class=\"built_in\">object</span> at <span class=\"number\">0x000001B4167C10F0</span>&gt;</span><br><span class=\"line\">ping: &lt;__main__.D <span class=\"built_in\">object</span> at <span class=\"number\">0x000001B4167C10F0</span>&gt; <span class=\"comment\"># ②</span></span><br><span class=\"line\">pong: &lt;__main__.D <span class=\"built_in\">object</span> at <span class=\"number\">0x000001B4167C10F0</span>&gt; <span class=\"comment\"># ③</span></span><br><span class=\"line\">pong: &lt;__main__.D <span class=\"built_in\">object</span> at <span class=\"number\">0x000001B4167C10F0</span>&gt; <span class=\"comment\"># ④</span></span><br><span class=\"line\">PONG: &lt;__main__.D <span class=\"built_in\">object</span> at <span class=\"number\">0x000001B4167C10F0</span>&gt; <span class=\"comment\"># ⑤</span></span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>① 第一个调用的是 <code>self.ping()</code>，运行的是 <code>D</code> 类的 <code>ping</code> 方法，输出这一行和下一行。</li>\n<li>② 第二个调用的是 <code>super().ping()</code>，跳过 <code>D</code> 类的 <code>ping</code> 方法，找到 <code>A</code> 类的 <code>ping</code> 方法。</li>\n<li>③ 第三个调用的是 <code>self.pong()</code>，根据 <code>__mro__</code>，找到的是 <code>B</code> 类实现的 <code>pong</code> 方法（尽管 <code>C</code> 类也实现了此方法）。</li>\n<li>④ 第四个调用的是 <code>super().pong()</code>，也根据 <code>__mro__</code>，找到的是 <code>B</code> 类实现的 <code>pong</code> 方法。</li>\n<li>⑤ 第五个调用的是 <code>C.pong(self)</code>，忽略 <code>__mro__</code>，找到的是 <code>C</code> 类实现的 <code>pong</code> 方法。</li>\n</ul>\n<p>方法解析顺序不仅考虑继承图，还考虑子类声明中列出的超类顺序。也就是说，如果把 <code>D</code> 类声明为 <code>class D(C, B):</code>，那么 <code>D</code> 类的 <code>__mro__</code> 属性就会不一样：先搜索 <code>C</code> 类，在搜索 <code>B</code> 类。<br>分析类时，在交互式控制台中查看 <code>__mro__</code> 属性，能便于我们分析它们的继承管理。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bool</span>.__mro__</span><br><span class=\"line\">(&lt;<span class=\"keyword\">class</span> <span class=\"string\">'bool'</span>&gt;, &lt;<span class=\"keyword\">class</span> <span class=\"string\">'int'</span>&gt;, &lt;<span class=\"keyword\">class</span> <span class=\"string\">'object'</span>&gt;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> numbers</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers.Integral.__mro__</span><br><span class=\"line\">(&lt;<span class=\"keyword\">class</span> <span class=\"string\">'numbers.Integral'</span>&gt;, &lt;<span class=\"keyword\">class</span> <span class=\"string\">'numbers.Rational'</span>&gt;, &lt;<span class=\"keyword\">class</span> <span class=\"string\">'numbers.Real'</span>&gt;, &lt;<span class=\"keyword\">class</span> <span class=\"string\">'numbers.Complex'</span>&gt;, &lt;<span class=\"keyword\">class</span> <span class=\"string\">'numbers.Number'</span>&gt;, &lt;<span class=\"keyword\">class</span> <span class=\"string\">'object'</span>&gt;)</span><br></pre></td></tr></tbody></table></figure>\n","categories":["Python"],"tags":["Python","继承"]},{"title":"SQLAlchemy & Pandas","url":"/posts/201810/31333.html","content":"<p>做数据分析如果用到了数据库作为数据源，pandas 提供了 <code>read_sql</code> 函数，那么如果数据库使用了 <code>SQLAlchemy</code> ORM 该怎么利用这个函数呢？<br>官方文档上说明可以使用，只是说的比较笼统，具体代码如下：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">df = pd.read_sql(query.statement, query.session.bind)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果使用的是 <code>Flask-SQLAlchemy</code> 则可以为：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">df = pd.read_sql(User.query.<span class=\"built_in\">filter</span>().statement, db.session.bind)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>参考：<a href=\"https://stackoverflow.com/questions/29525808/sqlalchemy-orm-conversion-to-pandas-dataframe\">SQLAlchemy ORM conversion to pandas DataFrame</a></p>\n","categories":["pandas"],"tags":["pandas"]},{"title":"SQLAlchemy Relationship 配置","url":"/posts/201806/47469.html","content":"<p>翻译自：<a href=\"http://docs.sqlalchemy.org/en/latest/orm/relationships.html\">Relationship Configuration</a></p>\n<h1 id=\"基本关系模式\"><a href=\"#基本关系模式\" class=\"headerlink\" title=\"基本关系模式\"></a>基本关系模式</h1><p>下面每一节需要导入如下模块：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Table, Column, Integer, ForeignKey</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> relationship</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</span><br><span class=\"line\"></span><br><span class=\"line\">Base = declarative_base()</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"一对多\"><a href=\"#一对多\" class=\"headerlink\" title=\"一对多\"></a>一对多</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'parent'</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    children = relationship(<span class=\"string\">\"Child\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Child</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'child'</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    parent_id = Column(Integer, ForeignKey(<span class=\"string\">'parent.id'</span>))</span><br></pre></td></tr></tbody></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"多对一\"><a href=\"#多对一\" class=\"headerlink\" title=\"多对一\"></a>多对一</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'parent'</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    child_id = Column(Integer, ForeignKey(<span class=\"string\">'child.id'</span>))</span><br><span class=\"line\">    child = relationship(<span class=\"string\">\"Child\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Child</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'child'</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"一对一\"><a href=\"#一对一\" class=\"headerlink\" title=\"一对一\"></a>一对一</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'parent'</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    child = relationship(<span class=\"string\">\"Child\"</span>, uselist=<span class=\"literal\">False</span>, back_populates=<span class=\"string\">\"parent\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Child</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'child'</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    parent_id = Column(Integer, ForeignKey(<span class=\"string\">'parent.id'</span>))</span><br><span class=\"line\">    parent = relationship(<span class=\"string\">\"Parent\"</span>, back_populates=<span class=\"string\">\"child\"</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"多对多\"><a href=\"#多对多\" class=\"headerlink\" title=\"多对多\"></a>多对多</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">association_table = Table(<span class=\"string\">'association'</span>, Base.metadata,</span><br><span class=\"line\">    Column(<span class=\"string\">'left_id'</span>, Integer, ForeignKey(<span class=\"string\">'left.id'</span>)),</span><br><span class=\"line\">    Column(<span class=\"string\">'right_id'</span>, Integer, ForeignKey(<span class=\"string\">'right.id'</span>))</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'left'</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    children = relationship(<span class=\"string\">\"Child\"</span>,</span><br><span class=\"line\">                    secondary=association_table)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Child</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'right'</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"关联对象\"><a href=\"#关联对象\" class=\"headerlink\" title=\"关联对象\"></a>关联对象</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Association</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'association'</span></span><br><span class=\"line\">    left_id = Column(Integer, ForeignKey(<span class=\"string\">'left.id'</span>), primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    right_id = Column(Integer, ForeignKey(<span class=\"string\">'right.id'</span>), primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    extra_data = Column(String(<span class=\"number\">50</span>))</span><br><span class=\"line\">    child = relationship(<span class=\"string\">\"Child\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'left'</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    children = relationship(<span class=\"string\">\"Association\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Child</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'right'</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"邻接列表关系\"><a href=\"#邻接列表关系\" class=\"headerlink\" title=\"邻接列表关系\"></a>邻接列表关系</h1><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'node'</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    parent_id = Column(Integer, ForeignKey(<span class=\"string\">'node.id'</span>))</span><br><span class=\"line\">    data = Column(String(<span class=\"number\">50</span>))</span><br><span class=\"line\">    children = relationship(<span class=\"string\">\"Node\"</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">root --+---&gt; child1</span><br><span class=\"line\">       +---&gt; child2 --+--&gt; subchild1</span><br><span class=\"line\">       |              +--&gt; subchild2</span><br><span class=\"line\">       +---&gt; child3</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">id       parent_id     data</span><br><span class=\"line\">---      -------       ----</span><br><span class=\"line\">1        NULL          root</span><br><span class=\"line\">2        1             child1</span><br><span class=\"line\">3        1             child2</span><br><span class=\"line\">4        3             subchild1</span><br><span class=\"line\">5        3             subchild2</span><br><span class=\"line\">6        1             child3</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"反向链接关系\"><a href=\"#反向链接关系\" class=\"headerlink\" title=\"反向链接关系\"></a>反向链接关系</h1><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Integer, ForeignKey, String, Column</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> relationship</span><br><span class=\"line\"></span><br><span class=\"line\">Base = declarative_base()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'user'</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    name = Column(String)</span><br><span class=\"line\"></span><br><span class=\"line\">    addresses = relationship(<span class=\"string\">\"Address\"</span>, backref=<span class=\"string\">\"user\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Address</span>(<span class=\"title class_ inherited__\">Base</span>):</span><br><span class=\"line\">    __tablename__ = <span class=\"string\">'address'</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = Column(Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    email = Column(String)</span><br><span class=\"line\">    user_id = Column(Integer, ForeignKey(<span class=\"string\">'user.id'</span>))</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"配置关系联结（join）\"><a href=\"#配置关系联结（join）\" class=\"headerlink\" title=\"配置关系联结（join）\"></a>配置关系联结（join）</h1><h1 id=\"配置与技巧\"><a href=\"#配置与技巧\" class=\"headerlink\" title=\"配置与技巧\"></a>配置与技巧</h1><h2 id=\"大数据下的配置\"><a href=\"#大数据下的配置\" class=\"headerlink\" title=\"大数据下的配置\"></a>大数据下的配置</h2><h2 id=\"自定义访问\"><a href=\"#自定义访问\" class=\"headerlink\" title=\"自定义访问\"></a>自定义访问</h2><h2 id=\"自定义集合实现\"><a href=\"#自定义集合实现\" class=\"headerlink\" title=\"自定义集合实现\"></a>自定义集合实现</h2><h2 id=\"Collection-Internals\"><a href=\"#Collection-Internals\" class=\"headerlink\" title=\"Collection Internals\"></a>Collection Internals</h2><h1 id=\"特殊的关系持久模式\"><a href=\"#特殊的关系持久模式\" class=\"headerlink\" title=\"特殊的关系持久模式\"></a>特殊的关系持久模式</h1><h2 id=\"指向自己的行-x2F-相互依赖的行\"><a href=\"#指向自己的行-x2F-相互依赖的行\" class=\"headerlink\" title=\"指向自己的行 / 相互依赖的行\"></a>指向自己的行 / 相互依赖的行</h2><h2 id=\"可变主键-x2F-更新串联-Cascades\"><a href=\"#可变主键-x2F-更新串联-Cascades\" class=\"headerlink\" title=\"可变主键 / 更新串联(Cascades)\"></a>可变主键 / 更新串联 (Cascades)</h2><h2 id=\"关系-API\"><a href=\"#关系-API\" class=\"headerlink\" title=\"关系 API\"></a>关系 API</h2>","categories":["Python","ORM"],"tags":["Python","ORM","SQLAlchemy","数据库"]},{"title":"更改 Ubuntu 上 Python 的默认版本","url":"/posts/201807/63235.html","content":"<p>通常 Python 用户使用非系统 Python 发行版，如 Miniconda。这些 Python 发行版通常允许在 Python 版本之间轻松切换。但是，在必须使用系统 Python 的情况下，可以使用 <code>update-alternatives</code> 持久切换默认的 Python 版本。具体步骤如下：</p>\n<h2 id=\"不用-sudo\"><a href=\"#不用-sudo\" class=\"headerlink\" title=\"不用 sudo\"></a>不用 sudo</h2><p>新建路径：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/.local/bin</span><br></pre></td></tr></tbody></table></figure>\n\n<p>编辑 <code>.bashrc</code></p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.local/bin:<span class=\"variable\">$PATH</span>\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>设置：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">update-alternatives --install <span class=\"variable\">$HOME</span>/.local/bin/python python /usr/bin/python3 20</span><br><span class=\"line\"></span><br><span class=\"line\">update-alternatives --install <span class=\"variable\">$HOME</span>/.local/bin/python python /usr/bin/python2 10</span><br></pre></td></tr></tbody></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"需要使用-sudo\"><a href=\"#需要使用-sudo\" class=\"headerlink\" title=\"需要使用 sudo\"></a>需要使用 sudo</h2><figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">update-alternatives --install /usr/bin/python python /usr/bin/python2 20 --slave /usr/bin/pip pip /usr/local/bin/pip2</span><br><span class=\"line\">update-alternatives --install /usr/bin/python python /usr/bin/python3 30 --slave /usr/bin/pip pip /usr/local/bin/pip3</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"查看与切换\"><a href=\"#查看与切换\" class=\"headerlink\" title=\"查看与切换\"></a>查看与切换</h2><figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">update-alternatives --config python</span><br></pre></td></tr></tbody></table></figure>\n\n<p>翻译自：<a href=\"https://www.scivision.co/set-python-version-update-alternatives/\">Set Python version with update-alternatives</a></p>\n","categories":["Linux"],"tags":["Linux","Ubuntu"]},{"title":"学习网站","url":"/posts/201812/35993.html","content":"<p>正则表达式：</p>\n<ul>\n<li><a href=\"https://regex101.com/\">regex101</a></li>\n<li><a href=\"https://github.com/ziishaned/learn-regex\">learn-regex</a></li>\n</ul>\n","tags":["备忘录"]},{"title":"权限系统的设计思考","url":"/posts/201806/17060.html","content":"<p>一个管理系统一般需要附带一套权限系统，来控制什么样的人可以访问什么资源。如果你的系统是一个网站后台，如公司的 OA 系统，那么权限系统的设计应该在前后端分别设计。</p>\n<p>前端权限，主要来控制页面是否可访问，页面上组件元素是否显示、是否可点击、可编辑、可输入等。根据颗粒度不同：</p>\n<ul>\n<li>路由（或页面）权限</li>\n<li>页面组件权限</li>\n</ul>\n<p>后端权限，主要来控制 API 是否可访问，在细化到底层，API 对应的数据库的增、删、查、改。根据颗粒度不同：</p>\n<ul>\n<li>Restful API 权限</li>\n<li>数据权限</li>\n</ul>\n<p>对于数据权限，如果我们以 <code>提交人</code> 为标准来思考权限：</p>\n<ul>\n<li>增：是否可以添加数据，可以添加数据的那些字段。</li>\n<li>删：是否可以删除数据，是否可删除自己添加的数据，还是可以删除别人（任何人、某类人）添加的数据也可以删除。</li>\n<li>查：是否可以查看数据，是可以查看自己添加的数据，还是可以查看别人（任何人、某类人）添加的数据；可以查看数据的哪些字段，禁止查看数据的哪些字段。</li>\n<li>改：是否可以更改数据，是可以更改自己添加的数据，还是可以更改别人（任何人、某类人）添加的数据；可以更改数据的哪些字段，禁止查看数据的哪些字段。</li>\n</ul>\n<p>一般情况下，权限系统的设计部分根据人员来分配，而会根据给人员分配角色，通过给不同角色赋予不同权限，来限定不同人员的权限范围。</p>\n<p>以上是粗略的分析，针对具体的业务还要具体分析。最近做一个学校教务 CRM 系统，除了 <code>admin</code>，里面按照工作逻辑，角色有如下划分：</p>\n<ul>\n<li>网站管理员：统筹网站控制，基础信息录入</li>\n<li>管理者（领导）：可以查看所有统计数据</li>\n<li><strong>班主任</strong>：需要录入大量数据，查看本班级数据，公共数据</li>\n<li>教师：需要录入大量数据，查看自己录入的数据，公共数据</li>\n<li>其他：需要录入少量数据，查看自己录入的数据，公共数据</li>\n</ul>\n<p>在数据层面主要划分为：</p>\n<ul>\n<li>自己录入的数据</li>\n<li>班级数据集合</li>\n<li>公共数据集合</li>\n</ul>\n<p>同时，大部分数据集，增删查改有时间限制，一般过了某个时间点数据只能查看，不能增删改，若需变动，向 <code>管理者</code> 申请通过 <code>网站管理员</code> 变动。</p>\n<p>以此为背景，设计背后的权限逻辑，及具体的代码实现，做到代码和权限控制低耦合。</p>\n<p>（开坑，待续……）</p>\n","categories":["总结"],"tags":["总结","思考"]},{"title":"程序员的字体","url":"/posts/201910/60574.html","content":"<p>如今的开发工具基本都是上开箱即用，并能收获不错的开发体验。但是在中文环境下，开发工具默认的字体设置往往不尽人意。连续几天在几个同事的代码界面上发现了&nbsp;&nbsp;<code>宋体</code>&nbsp;、 <code>Monospaced</code>&nbsp;、 <code>微软雅黑</code>&nbsp;、 <code>楷体</code>&nbsp;等，五花八门……</p>\n<p>作为一个贫穷的常年穿格格杉的程序员😂，折腾不了衣服，就只能折腾自己编辑器的主题和字体。话说新装一个编辑器第一件事就是选一款心怡的主题，配置一个让眼睛舒服的字体。主题撇开不讲，下面说一下字体。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"衬线字体和非衬线字体\"><a href=\"#衬线字体和非衬线字体\" class=\"headerlink\" title=\"衬线字体和非衬线字体\"></a>衬线字体和非衬线字体</h2><p>不太严谨的说，我们可以把字体分为<a href=\"https://zh.wikipedia.org/wiki/%E8%A1%AC%E7%BA%BF%E4%BD%93\">衬线字体</a>和<a href=\"https://zh.wikipedia.org/zh-hans/%E6%97%A0%E8%A1%AC%E7%BA%BF%E4%BD%93\">非衬线字体</a> (sans-serif)。视觉上，衬线字体在字的笔画开始、结束的地方有额外的装饰，而且笔画的粗细会有所不同；无衬线字体没有这些额外的装饰，笔画的粗细差不多，线条统一。我们在生活中，常见的衬线字体的代表有：宋体、<a href=\"https://baike.baidu.com/item/Times%20New%20Roman/9286728\">Times New Roman</a>，只要使用过 Word，相信大家对这两款字体不会陌生。除此之外，在政府文件中常见到的仿宋字体，在儿童读物上常见到楷体都属于衬线字体。常见的非衬线字体有绝对不会陌生的微软雅黑、黑体等，西方最常见的应该是 <a href=\"https://baike.baidu.com/item/Helvetica/3241042\">Helvetica </a>系列字体，关于这个字体，有兴趣可以读一下 <a href=\"https://book.douban.com/subject/20441938/\">《字体的故事》</a>中的介绍，非常有意思，网上比较容易找到电子版。</p>\n<p>衬线字体多用于传统的正文印刷中，适合在纸质中显示大段文字，它能带来更好的可读性，我们见到的绝大多数书籍的正文基本上都为衬线字体；而非衬线字体多用于简短、突出的文段中，如：文章标题、PPT。随着计算机的兴起，衬线字体因为笔画丰富和计算机的渲染机制，在较小字号的情况下，往往会有很强烈的锯齿感，特别前几年显示器分辨率普遍不高的情况下（在这里吐槽下前些年联想笔记本万年不变的 1366×768🙃），非常影响美观。这时候就轮到非衬线字体登场了，在中国伴随 Windows 而来就是大名鼎鼎的&nbsp;<a href=\"https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF%E9%9B%85%E9%BB%91%E4%BD%93/988302\">微软雅黑</a>。</p>\n<p>拿办公三件套来说，Word 编辑的文字一般用于办公打印，推荐使用宋体、<a href=\"https://baike.baidu.com/item/%E6%80%9D%E6%BA%90%E5%AE%8B%E4%BD%93/20787850\">思源宋体</a>等。PPT 讲究设计感，有各种设计感强的艺术字体、手写体等，根据喜好自己可以发挥。如果是中规中矩的场合，建议还是选用常规的非衬线字体，如果微软雅黑用腻了，可以尝试<a href=\"https://baike.baidu.com/item/%E6%80%9D%E6%BA%90%E9%BB%91%E4%BD%93/14919098\">思源黑体</a>等；在 Excel 中，如果做的表格不用于打印，而仅做电子版查阅，建议更改为微软雅黑等非衬线字体。Chrome 浏览器中，建议标准字体设置为非衬线字体。各项软件的的菜单栏，如果你发现默认的是宋体，而软件又支持更改字体，建议选择微软雅黑。版权类的字体中，有许多优秀美观个性化的选择，可以自行搜索。</p>\n<h2 id=\"等宽字体\"><a href=\"#等宽字体\" class=\"headerlink\" title=\"等宽字体\"></a>等宽字体</h2><p>上面介绍了字体的基本情况，下面轮到我们程序员的专属 - <a href=\"https://baike.baidu.com/item/%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93/8434037\">等宽字体</a> (monospaced font) 登场了。早期等宽字体只是因为技术限制，无法进行字母宽度的比例调整，因此将每个字元都制作成一样的宽度，从而形成了等宽字体。现在我们的技术早已脱离了这种限制，但是这类字体又在程序员群体中找到了新生 - 它非常适合显示代码，让代码看着更加整齐清晰。现代的等宽字体往往会针对代码环境做专门的设计，例如：专门设计在传统字体中容易混淆的 <code>0</code> 和 <code>O</code> ， <code>1</code> 和 <code>l</code> 等，增加区分度，避免误读。同时它们一般都为非衬线字体，便于电脑屏幕中显示更多行的代码，我们的代码字号设置往往不太大，这时候非常适合非衬线类字体的发挥。</p>\n<p>Windows 环境下，常见的等宽字体有 <a href=\"https://baike.baidu.com/item/Consolas/630820\">Consolas</a>，是 Windows 环境下比较常用的编程字体。VSCode 编辑器开箱即用的默认字体就是 Consolas。前几年为了兼顾中文显示，网上流传有 Consolas 和微软雅黑的混合封装体 - Yahei Consolas Hybrid，体验非常好，网上这款字体的版本比较多，不同人技术不同，封装的略有差异，有些版本可能存在缺陷，可自行选择。</p>\n<p>现在的代码编辑器多支持设置第二字体，大多数英文等宽字体的字符集不包含中文字符，这时候可以显示为设置的第二字体，可以设置为微软雅黑。比较有代表的是 <a href=\"http://www.jetbrains.com/\">Jetbrains</a> 家的编辑器都支持这个设置。</p>\n<img src=\"/posts/201910/60574/pycharm.png\" class=\"\">\n\n<p>VSCode 中可以在字体设置中追加微软雅黑字体，这样对中文字符就可以用微软雅黑字体显示。</p>\n<img src=\"/posts/201910/60574/vscode.png\" class=\"\">\n\n<p>比较常用的等宽字体还有 Source Code Pro、DejaVu Sans Mono、Ubuntu Mono 等，还有斜体比较个性花哨的&nbsp;Operator Mono（非免费）：</p>\n<img src=\"/posts/201910/60574/font.png\" class=\"\">\n\n\n\n<h2 id=\"控制台中的等宽字体\"><a href=\"#控制台中的等宽字体\" class=\"headerlink\" title=\"控制台中的等宽字体\"></a>控制台中的等宽字体</h2><p>Windows 多年来对控制台的体验并不重视，打开 CMD 或者 Powershell，往往看到的是锯齿感很明显的宋体。因为控制台中对字体限制更加严格，在控制台设置中，可选则的字体并不多，更改代码页才能选择 Consolas 字体，但是这样又总会出现各种字符显示问题。在这里推荐使用 <code>等宽更纱黑体</code> ，完美适配控制台环境，并能收获很好的中文显示效果。对第三方的控制台，往往能比较灵活的设置字体，不过仍然推荐使用等宽更纱黑体，非常好用。PyCharm、VSCode 等控制台中的字体设置同代码中字体设置，可以随意搭配。</p>\n<p>随着微软拥抱开源，对控制台的体验也开始着手改进，推出了 Windows Terminal，默认字体为 Consolas 显示效果比较好。然后又随着  Windows Terminal&nbsp;发布了适合 Terminal 环境的字体 -&nbsp;Cascadia Code，比较个性，同时支持<strong>连字</strong>，可尝试体验。</p>\n<img src=\"/posts/201910/60574/CascadiaCode.gif\" class=\"\" title=\"CascadiaCode\">\n\n\n<h2 id=\"字体连字\"><a href=\"#字体连字\" class=\"headerlink\" title=\"字体连字\"></a>字体连字</h2><p>上面的 GIF 动画，为我们展示了字符的连字显示，可以将 <code>&gt;=</code>&nbsp;显示为两个字符宽度的&nbsp;<code>≥</code>&nbsp;，可以将 <code>===</code>&nbsp;显示为 3 个字符宽度的&nbsp;<code>≡</code>&nbsp;，算是比较有意思的一种体验。用在代码中，可以增加我们代码的可读性。比较遗憾的是，Consolas 字体不支持连字。而所有支持连字的代码字体中，集大成的是 <a href=\"https://github.com/tonsky/FiraCode\">Fira Code</a>，连字效果非常丰富。</p>\n<img src=\"/posts/201910/60574/FiraCode.png\" class=\"\" title=\"FiraCode\">\n\n<p>如果使用的是 JetBrains 家的编辑器，2020 年以后版本的编辑器已经自带了 <a href=\"https://www.jetbrains.com/lp/mono/\">JetBrains Mono</a> 字体，且支持连子，开箱即用，我们只要根据喜好配置第二字体既可。<br>因为前端代码中 <code>===</code> 、 <code>&gt;=</code> 等运算符使用的比较多，以及随着 ES6 中箭头函数 <code>=&gt;</code> 和扩展运算符 <code>...</code> 等的普及，支持连字的字体非常适合用于前端代码，目前就是使用 <code>Fira Code</code> 作为自己前端代码的首选字体。在 Python 代码中这种情况相对较少，如果使用 PyCharm 使用 JetBrains Mono 既可。</p>\n<h2 id=\"图标字体\"><a href=\"#图标字体\" class=\"headerlink\" title=\"图标字体\"></a>图标字体</h2><p>我们对终端进行美化时，可能接触到 <strong><a href=\"https://www.nerdfonts.com/\">Nerd Fonts</a></strong> 字体。它会针对已有的字体打 patch，把一些 icon 字符插入进去。如针对 FiraCode 有对应的补丁字体 FiraCode Nerd Font。</p>\n<hr>\n<p>本文中许多地方仅出于自己的直观认知，未查阅资料印证，不严谨和错误的地方欢迎指正！</p>\n","categories":["字体"],"tags":["字体"]},{"title":"VSCode 配置","url":"/posts/201805/57001.html","content":"<h1 id=\"必备插件\"><a href=\"#必备插件\" class=\"headerlink\" title=\"必备插件\"></a>必备插件</h1><h2 id=\"优化编辑器\"><a href=\"#优化编辑器\" class=\"headerlink\" title=\"优化编辑器\"></a>优化编辑器</h2><ul>\n<li>Guides: 高亮缩进基准线</li>\n<li> indent-rainbow: 优化缩进点</li>\n<li> Better Comments： 优化注释</li>\n<li> Terminal: 可以在编辑器底边栏添加一个控制台按钮，便于鼠标快速访问</li>\n<li> Code Outline: 显示代码大纲</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h2><ul>\n<li>Material Theme</li>\n</ul>\n<h2 id=\"效率工具\"><a href=\"#效率工具\" class=\"headerlink\" title=\"效率工具\"></a>效率工具</h2><ul>\n<li>Auto Close Tag: 自动闭合 HTML 标签</li>\n<li> Auto Rename Tag: 修改 HTML 标签时，自动修改匹配的标签</li>\n<li> Path Intellisense: 路径完成提示</li>\n</ul>\n<h2 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h2><ul>\n<li>gitignore</li>\n<li>GitLents</li>\n</ul>\n<h2 id=\"语言相关\"><a href=\"#语言相关\" class=\"headerlink\" title=\"语言相关\"></a>语言相关</h2><p>Vue:</p>\n<ul>\n<li>Vetur</li>\n</ul>\n<p>Python：</p>\n<ul>\n<li>Python</li>\n</ul>\n<h2 id=\"代码检查、格式化\"><a href=\"#代码检查、格式化\" class=\"headerlink\" title=\"代码检查、格式化\"></a>代码检查、格式化</h2><ul>\n<li>ESlint</li>\n<li>Prettier</li>\n</ul>\n<h2 id=\"Markdown-写作相关\"><a href=\"#Markdown-写作相关\" class=\"headerlink\" title=\"Markdown 写作相关\"></a>Markdown 写作相关</h2><ul>\n<li>Markdown All in One</li>\n<li>Markdown Preview Enhanced</li>\n<li>markdownlint</li>\n</ul>\n<p>如果想让书写显得工整一点，配置 Markdown 换行设置为：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"string\">\"[markdown]\"</span>: {</span><br><span class=\"line\">        <span class=\"string\">\"editor.wordWrap\"</span>: <span class=\"string\">\"wordWrapColumn\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"editor.quickSuggestions\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>editor.wordWrap</code> 有如下几个配置：</p>\n<ul>\n<li><code>off</code> - 禁用折行</li>\n<li><code>on</code> - 视区折行</li>\n<li><code>wordWrapColumn</code> - 在 <code>“editor.wordWrapColumn”</code> 处折行</li>\n<li><code>bounded</code> - 在视区与 <code>“editor.wordWrapColumn”</code> 两者的较小者处折行</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>Polacode: 生成代码截图</li>\n</ul>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"自动格式化\"><a href=\"#自动格式化\" class=\"headerlink\" title=\"自动格式化\"></a>自动格式化</h2><p><code>Prettier</code> 和 <code>Eslint</code> 通用插件配置：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 让 prettier 使用 eslint 的代码格式进行校验</span></span><br><span class=\"line\">  <span class=\"string\">\"prettier.eslintIntegration\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">      {</span><br><span class=\"line\">          <span class=\"string\">\"language\"</span>: <span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">      {</span><br><span class=\"line\">          <span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      },</span><br><span class=\"line\">  ]</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>上述配置在保存的时候能够自动修复代码中存在的不符合指定 <code>eslint</code> 代码风格的问题，免除手动修改的烦恼。</p>\n<h2 id=\"Vue-相关\"><a href=\"#Vue-相关\" class=\"headerlink\" title=\"Vue 相关\"></a>Vue 相关</h2><p>在 <code>vue</code> 中使用 <code>eslint</code> 插件的相关配置：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"comment\">// 这个按用户自身习惯选择</span></span><br><span class=\"line\">  <span class=\"string\">\"vetur.format.defaultFormatter.html\"</span>: <span class=\"string\">\"js-beautify-html\"</span>,  </span><br><span class=\"line\">  <span class=\"comment\">// 让 vue 中的 js 按编辑器自带的 ts 格式进行格式化</span></span><br><span class=\"line\">  <span class=\"string\">\"vetur.format.defaultFormatter.js\"</span>: <span class=\"string\">\"vscode-typescript\"</span>,  </span><br><span class=\"line\">  <span class=\"string\">\"vetur.format.defaultFormatterOptions\"</span>: {</span><br><span class=\"line\">    <span class=\"string\">\"js-beautify-html\"</span>: {</span><br><span class=\"line\">      <span class=\"comment\">// vue 组件中 html 代码格式化样式</span></span><br><span class=\"line\">      <span class=\"string\">\"wrap_attributes\"</span>: <span class=\"string\">\"force-aligned\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果同时用 <code>VSCode</code> 写 Python 代码，请勿设置 <code>\"editor.tabSize\": 2</code>，<code>Prettier</code> 已经自带 <code>\"prettier.tabWidth\": 2</code> 配置，不用单独在设置能正确格式化前端类代码。</p>\n","tags":["VSCode","编辑器"]},{"title":"Webstorm 设置","url":"/posts/201809/28477.html","content":"<p>若想启用 <code>Prettier</code> 格式化代码，需要自行安装 <code>Prettier</code>：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">yarn add --dev prettier</span><br></pre></td></tr></tbody></table></figure>\n<p>这样编辑器会自动选择 <code>Prettier</code> 路径，完成配置。格式化快捷键 <code>Ctrl+Shift+Alt+P</code>。</p>\n<p>注意，使用 <code>Prettier</code> 格式化代码与内置的格式化引擎（快捷键为 <code>Ctrl+Shift+L</code>）存在差异，而且 WebStorm 编辑器无法像 VSCode 那样在不同的语言环境下选择格式化引擎，即无法达到在编辑 JavaScript 代码时按 <code>Ctrl+Shift+L</code> 使用的是 <code>Prettier</code> 来个格式化代码的效果。</p>\n<p>此时若手误按 <code>Ctrl+Shift+L</code> 快捷键，格式化的代码和原来的不符，给 Git 版本控制带来麻烦。</p>\n<p>为解决上述问题，我们通过 WebStorm 提供的 <code>Watch Filers</code> 来迂回解决，具体操作为：打开 <code>Setting</code>，选择 <code>Tools&gt;File Watchers</code>，点击 <code>+</code>，选择 <code>Prettier</code>，用默认设置点及 <code>Ok</code> 保存即可。</p>\n<p>这样，我们在保存代码是时候，能自动使用 <code>Prettier</code> 来格式化代码，不用再考虑快捷键格式化代码的问题。</p>\n","categories":["编辑器"],"tags":["Webstorm"]},{"title":"hexo 插入图片","url":"/posts/201812/55443.html","content":"<p>vscode 内无法预览代码的图片，通过插件 <code>Markdown Preview Enhanced</code> 来解决，首先安装此插件，然后 <code>ctrl+shift+P</code> 输入</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Markdown Preview Enhanced: Extend Parser</span><br></pre></td></tr></tbody></table></figure>\n\n<p>调出插件的 <code>parse.js</code> 文件，修改其中的 <code>onWillParseMarkdown</code> 方法：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = {</span><br><span class=\"line\">  <span class=\"attr\">onWillParseMarkdown</span>: <span class=\"keyword\">function</span> (<span class=\"params\">markdown</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> {</span><br><span class=\"line\">      <span class=\"keyword\">const</span> title = <span class=\"regexp\">/title:\\s*(.*)/</span>.<span class=\"title function_\">exec</span>(markdown)[<span class=\"number\">1</span>].<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s/</span>, <span class=\"string\">'-'</span>)</span><br><span class=\"line\">      markdown = markdown.<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">        <span class=\"regexp\">/\\{%\\s*asset_img\\s*(\\S*)\\s*(.*)\\s+%\\}/g</span>,</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">whole, $1, $2</span>) =&gt;</span>  (<span class=\"string\">`![<span class=\"subst\">${$2}</span>](<span class=\"subst\">${title}</span>/<span class=\"subst\">${$1}</span>)`</span>)</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">resolve</span>(markdown)</span><br><span class=\"line\">    })</span><br><span class=\"line\">  },</span><br><span class=\"line\">  ...  ...</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n","tags":["编辑器"]},{"title":"自动部署博客","url":"/posts/202001/40769.html","content":"<p>本文介绍通过 <code>Github Actions</code> 和 <code>Cloudflare Pages</code> 服务两种方式自动部署博客。</p>\n<h2 id=\"Github-Actions\"><a href=\"#Github-Actions\" class=\"headerlink\" title=\"Github Actions\"></a>Github Actions</h2><p>生成用于仓库间推送的秘钥：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -f hexo-deploy-key -t rsa -C \"l1xnan@qq.com\"</span><br></pre></td></tr></tbody></table></figure>\n<p>其会在当前路径生成两个文件：</p>\n<ul>\n<li>私钥: <code>hexo-deploy-key</code></li>\n<li>公钥: <code>hexo-deploy-key.pub</code></li>\n</ul>\n<p>我们将博客源码放在代码仓:</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/l1xnan/blog.git</span><br></pre></td></tr></tbody></table></figure>\n<p>在此仓库下进入 <strong>Settings &gt; Secrets and variables &gt; Actions</strong> 中添加一个 <strong>Secret</strong>，名称为 <code>HEXO_DEPLOY_KEY</code>，值为 <code>hexo-deploy-key</code> 文件内容。后续在 Workflow 中通过名称 <code>HEXO_DEPLOY_KEY</code> 使用这个密钥。</p>\n<p>Github Pages 部署在代码仓:</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/l1xnan/l1xnan.github.io.git</span><br></pre></td></tr></tbody></table></figure>\n<p>在此仓库下进入 <strong>Settings &gt; Deploy keys</strong> 中添加 Deploy key，值为 <code>hexo-deploy-key.pub</code> 文件内容，同时勾选 <strong>Allow write access</strong> 选项。</p>\n<p>模仿 Hexo 针对 Github Pages <a href=\"https://hexo.io/docs/github-pages.html\">官方帮助</a>做一下调整。在博客源文件仓库 <code>blog</code> 添加文件 Workflow 配置文件<code>.github/workflows/pages.yml</code>，内容如下：</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight yml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nodejs</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Cache</span> <span class=\"string\">NPM</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">${{</span> <span class=\"string\">runner.OS</span> <span class=\"string\">}}-npm-cache</span></span><br><span class=\"line\">          <span class=\"attr\">restore-keys:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">            ${{ runner.OS }}-npm-cache</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">env</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">HEXO_DEPLOY_KEY:</span> <span class=\"string\">${{secrets.HEXO_DEPLOY_KEY}}</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          mkdir -p ~/.ssh/</span></span><br><span class=\"line\"><span class=\"string\">          echo \"$HEXO_DEPLOY_KEY\" &gt; ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class=\"line\"><span class=\"string\">          git config --global user.name 'l1xnan'</span></span><br><span class=\"line\"><span class=\"string\">          git config --global user.email 'l1xnan@qq.com'</span></span><br><span class=\"line\"><span class=\"string\"></span>      </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">install</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">build</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br></pre></td></tr></tbody></table></figure>\n<p>这样我们提交 <code>blog</code> 代码仓文件时，会自动触发 Action 构建，并自动推送到 <code>l1xnan.github.io</code> 仓库，完成博客更新。</p>\n<p>对普通用户 GitHub Actions 提供了每月 2000 分钟的免费额度，触发一次 action 在 30s 左右，完全够用。如果使用 hugo 单次耗时会更短。<br>如果只是备份提交不想触发 Action，可以在提交信息中添加以下任何字符串：</p>\n<ul>\n<li><code>[skip ci]</code></li>\n<li><code>[ci skip]</code></li>\n<li><code>[no ci]</code></li>\n<li><code>[skip actions]</code></li>\n<li><code>[actions skip]</code></li>\n</ul>\n<p>或者，可以用两个空行结束提交消息，后跟：</p>\n<ul>\n<li><code>skip-checks:true</code></li>\n<li><code>skip-checks: true</code></li>\n</ul>\n<p>参考: <a href=\"https://docs.github.com/zh/actions/managing-workflow-runs/skipping-workflow-runs\">GitHub 操作：跳过工作流程运行</a></p>\n<h2 id=\"Cloudflare-Pages\"><a href=\"#Cloudflare-Pages\" class=\"headerlink\" title=\"Cloudflare Pages\"></a>Cloudflare Pages</h2><p>Cloudflare 也推出了 Pages 服务，使用 <a href=\"https://pages.cloudflare.com/\">Cloudflare Pages</a> 可以神方便的把 Hexo 部署到 Pages 中，且可以完全私有化部署，不要公开相关代码仓。</p>\n<p>操作上非常方便，只要注册 Cloudflare 账号，进入面板，在 <code>Pages</code> 页中创建项目，关联到 Github，指定读取 <code>blog</code> 权限，根据页面引导填写一些配置，即可完成部署，提供免费域名，例如：<a href=\"https://l1xnan.pages.dev/\">https://l1xnan.pages.dev</a>。</p>\n<p>这样我们每次提交 <code>blog</code> 仓，会触发部署构建，自动更新网站。Cloudflare Pages 每月免费 500 次构建。</p>\n<p>如果想临时跳过构建和部署，可在提交信息中添加 <code>[CI Skip]</code>、 <code>[CI-Skip]</code>、 <code>[Skip CI]</code>、<code>[Skip-CI]</code> 或者 <code>[CF-Pages-Skip]</code> 标志（不区分大小写）。<br>注意和 GitHub Actions 共有的标志有 <code>[skip ci]</code> 和 <code>[ci skip]</code>。</p>\n"},{"title":"记录本次建站配置过程","url":"/posts/201805/63363.html","content":"<p>前置条件：安装 <code>git</code>，<code>nodejs</code></p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm install -D hexo-deployer-git</span><br></pre></td></tr></tbody></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><h3 id=\"git-相关\"><a href=\"#git-相关\" class=\"headerlink\" title=\"git 相关\"></a>git 相关</h3><p><code>gitee.com/&lt;username&gt;</code> 上创建 <code>&lt;username&gt;</code> 同名仓库：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">https://gitee.com/&lt;username&gt;/&lt;username&gt;.git</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://gitee.com/&lt;username&gt;/&lt;username&gt;.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>branch</code> 可以是 <code>master</code> 分支，也可以是自定义的其他分支（如：<code>gh-pages</code>）</p>\n<p>部署上传</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></tbody></table></figure>\n\n<p>地址：<code>https://&lt;username&gt;.gitee.io</code>，即为你的 <code>Pages</code> 页地址。</p>\n<h2 id=\"备份源文件\"><a href=\"#备份源文件\" class=\"headerlink\" title=\"备份源文件\"></a>备份源文件</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin &lt;git-repo-url&gt;</span><br><span class=\"line\">git checkout -b src</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m \"初始化\"</span><br><span class=\"line\">git push origin src</span><br></pre></td></tr></tbody></table></figure>\n\n<p>其中 <code>&lt;git-repo-url&gt;</code> 可以与 <code>_config.yml</code> 配置文件中，博客静态文件的 <code>deploy/repo</code> 相同，也可以是自己其他私有仓库的地址，避免直接公开博客源文件。</p>\n<h2 id=\"异地更新\"><a href=\"#异地更新\" class=\"headerlink\" title=\"异地更新\"></a>异地更新</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">git clone &lt;git-repo-url&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>重复<code>初始化</code></p>\n<h2 id=\"修改主题\"><a href=\"#修改主题\" class=\"headerlink\" title=\"修改主题\"></a>修改主题</h2><h3 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ cd hexo</span><br><span class=\"line\">$ git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"修改配置\"><a href=\"#修改配置\" class=\"headerlink\" title=\"修改配置\"></a>修改配置</h3><p>修改 <code>_config.yml</code> 配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"># 修改语言为中文，注意是 zh-CN</span><br><span class=\"line\">language: zh-CN</span><br></pre></td></tr></tbody></table></figure>\n\n<p>新建文件：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">source/_data/next.yml</span><br></pre></td></tr></tbody></table></figure>\n\n<p>复制 <code>themes/next/_config.yml</code> 内的文件至 <code>next.yml</code>，然后修改 <code>next.yml</code> 文件。</p>\n<p>选择 主题：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">#scheme: Muse</span><br><span class=\"line\">#scheme: Mist</span><br><span class=\"line\">scheme: Pisces</span><br><span class=\"line\">...</span><br></pre></td></tr></tbody></table></figure>\n\n<p>设置 语言：</p>\n<p>（注意 <code>NexT 6.0</code> 以上版本语言配置是 <code>zh-CN</code>，而不是 <code>zh-Hans</code>）</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">language: zh-CN</span><br></pre></td></tr></tbody></table></figure>\n\n<p>设置 菜单：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br><span class=\"line\">hexo new page categories</span><br><span class=\"line\">hexo new page about</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li><code>tags</code> 用于给文章打标签，比较详细，具体到你文档的知识点标签。例如：是介绍 <code>闭包</code>，还是介绍<code>作用域</code>；</li>\n<li><code>categories</code> 用于给文章设置分类，相对笼统。例如：这篇文章是介绍 <code>JavaScript</code> 语言相关知识的，还是介绍 <code>Python</code> 相关方面知识的，是 <code>前端</code>，还是<code>后端</code>；</li>\n<li><code>about</code> 是博客的介绍页。</li>\n</ul>\n<p>修改对应生成的文件：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"># /source/tags/index.md</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">type: \"tags\"</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"># /source/categories/index.md</span><br><span class=\"line\">title: \"分类\"</span><br><span class=\"line\">type: \"categories\"</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"># /source/about/index.md</span><br><span class=\"line\">title: 关于</span><br></pre></td></tr></tbody></table></figure>\n\n<p>注意文章头中 <code>tags</code> 和 <code>categories</code> 的书写：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">title: 记录本次建站配置过程</span><br><span class=\"line\">date: 2018-05-26 00:28:51</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - 标签1</span><br><span class=\"line\">  - 标签2</span><br><span class=\"line\">categories:</span><br><span class=\"line\">  - 一级分类</span><br><span class=\"line\">  - 二级分类</span><br></pre></td></tr></tbody></table></figure>\n\n<p>上述 <code>标签1</code> 、<code>标签2</code> 是一个列表，相互之间没有从属。而 <code>一级分类</code>、<code>二级分类</code> 是有从属或者是层级关系的。</p>\n<h3 id=\"升级主题\"><a href=\"#升级主题\" class=\"headerlink\" title=\"升级主题\"></a>升级主题</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">$ cd themes/next</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"永久链接\"><a href=\"#永久链接\" class=\"headerlink\" title=\"永久链接\"></a>永久链接</h3><p>hexo 自动生成的链接规则为：<code>:year/:month/:day/:title</code>，特别是 <code>:title</code>，会造成生成的链接非常长，更何况其中包含中文字符时，官方的方案会更加让人难以忍受。幸好有大神也有这样的痛点，写了插件：<code>hexo-abbrlink</code>，使用上很简单：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-abbrlink</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然后编辑配置文件 <code>_config.yml</code> 的 <code>permalink</code> 参数：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">permalink: posts/:abbrlink.html</span><br></pre></td></tr></tbody></table></figure>\n\n<p>当然你也可以根据自己的需求自定，如：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">permalink: posts/:year:month:abbrlink.html</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>:abbrlink</code> 的生成规则及其他配置请参看<a href=\"https://github.com/rozbo/hexo-abbrlink\">项目文档</a> 。</p>\n<h3 id=\"其他主题推荐\"><a href=\"#其他主题推荐\" class=\"headerlink\" title=\"其他主题推荐\"></a>其他主题推荐</h3><p><code>hexo-theme-material</code>：<a href=\"https://github.com/viosey/hexo-theme-material\">https://github.com/viosey/hexo-theme-material</a></p>\n<h2 id=\"优化体验\"><a href=\"#优化体验\" class=\"headerlink\" title=\"优化体验\"></a>优化体验</h2><p>如果用 VSCode 作为博客的编辑器，可以隐藏一些不必要的文件（如：配置完成后隐藏配置文件）来优化体验。一般情况下，撰写博客文章，并不会一下子写完，如果后期灵感迸发，我们还会进一步修改文章，为了更快的找到我们最近编辑的文件，我们可以让我们的文件按照最后的修改时间排序，便于我们找到最新编辑的文件。综上，可在<code>工作区配置</code>中添加如下配置：</p>\n<figure class=\"highlight json\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">{</span></span><br><span class=\"line\">  <span class=\"attr\">\"files.exclude\"</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">{</span></span><br><span class=\"line\">    <span class=\"attr\">\"**/.git\"</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">\"**/.deploy*\"</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">\"**/node_modules\"</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">\"*.json\"</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">\"*.lock\"</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">\"themes\"</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">\"source/_data\"</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">\"public\"</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">}</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">\"explorer.sortOrder\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"modified\"</span></span><br><span class=\"line\"><span class=\"punctuation\">}</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>安装插件：</p>\n<ul>\n<li>Markdown All in One</li>\n<li>vscode-hexo</li>\n</ul>\n<h2 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h2><p>生成和部署</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></tbody></table></figure>\n\n<p>生成和启动测试服务器</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">hexo s -g</span><br></pre></td></tr></tbody></table></figure>\n\n<p>按照模板生成文章</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">hexo new \"您的文章标题\"</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"问题处理\"><a href=\"#问题处理\" class=\"headerlink\" title=\"问题处理\"></a>问题处理</h2><p>windows 下 git 出现恼人的 <code>warning: LF will be replaced by CRLF</code> 警告，修改 <code>git</code> 配置：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">git config --global core.autocrlf false</span><br></pre></td></tr></tbody></table></figure>\n\n<p>若不想全局更换 <code>autocrlf</code> 配置，可局部配置：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> .\\.deploy_git\\</span><br><span class=\"line\">git config --edit</span><br></pre></td></tr></tbody></table></figure>\n\n<p>编辑配置文件，添加如下配置：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[core]</span><br><span class=\"line\">    autocrlf = false</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行命令：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></tbody></table></figure>\n\n<p>参考：</p>\n<ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/\">Hexo 官方文档</a></li>\n<li><a href=\"http://theme-next.iissnan.com/\">NexT 主题文档</a></li>\n</ul>\n","categories":["其他"],"tags":["备忘录"]},{"title":"安斯库姆四重奏","url":"/posts/201812/19420.html","content":"<img src=\"/posts/201812/19420/Anscombe's_quartet_3.svg\" class=\"\" title=\"安斯库姆四重奏\">\n\n\n<p><strong>安斯库姆四重奏</strong>（Anscombe’s quartet）是四组基本的统计特性一致的数据，但由它们绘制出的图表则截然不同。每一组数据都包括了 11 个 ($x$,$y$) 点。这四组数据由统计学家<strong>弗朗西斯・安斯库姆</strong>（Francis Anscombe）于 1973 年构造，他的目的是用来说明在分析数据前先绘制图表的重要性，以及<strong>离群值</strong>对统计的影响之大。<br>这四组数据的共同统计特性如下：</p>\n<table>\n<thead>\n<tr>\n<th>性质</th>\n<th>数值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td> x 的平均数</td>\n<td> 9</td>\n</tr>\n<tr>\n<td>x 的方差</td>\n<td> 11</td>\n</tr>\n<tr>\n<td>y 的平均数</td>\n<td> 7.50（精确到小数点后两位）</td>\n</tr>\n<tr>\n<td>y 的方差</td>\n<td> 4.122 或 4.127（精确到小数点后三位）</td>\n</tr>\n<tr>\n<td>x 与 y 之间的相关系数</td>\n<td> 0.816（精确到小数点后三位）</td>\n</tr>\n<tr>\n<td>线性回归线</td>\n<td> $y=3.00+0.500x$（分别精确到小数点后两位和三位）</td>\n</tr>\n</tbody></table>\n<p>参见：<a href=\"https://zh.wikipedia.org/wiki/%E5%AE%89%E6%96%AF%E5%BA%93%E5%A7%86%E5%9B%9B%E9%87%8D%E5%A5%8F\">Wiki: 安斯库姆四重奏</a></p>\n"},{"title":"MongoDB 代码片段","url":"/posts/201807/39716.html","content":"<h2 id=\"字段操作\"><a href=\"#字段操作\" class=\"headerlink\" title=\"字段操作\"></a>字段操作</h2><figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"attr\">teacher_id</span>: <span class=\"string\">'0001'</span>,</span><br><span class=\"line\">    <span class=\"attr\">tel</span>: <span class=\"string\">'12345678901'</span>,</span><br><span class=\"line\">    <span class=\"attr\">details</span>: {</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">'English'</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"字段重命名\"><a href=\"#字段重命名\" class=\"headerlink\" title=\"字段重命名\"></a>字段重命名</h3><figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">teachers</span>.<span class=\"title function_\">update</span>(</span><br><span class=\"line\">  {},</span><br><span class=\"line\">  { <span class=\"attr\">$rename</span>: { <span class=\"string\">'teacher_id'</span>: <span class=\"string\">'teacherId'</span>, <span class=\"string\">'details.subject'</span>: <span class=\"string\">'details.course'</span> } },</span><br><span class=\"line\">  <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"literal\">true</span>,</span><br><span class=\"line\">);</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"字段删除\"><a href=\"#字段删除\" class=\"headerlink\" title=\"字段删除\"></a>字段删除</h3><figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">teachers</span>.<span class=\"title function_\">update</span>({}, { <span class=\"attr\">$unset</span>: { <span class=\"attr\">mobile</span>: <span class=\"number\">1</span> } }, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">teachers</span>.<span class=\"title function_\">update</span>({}, { <span class=\"attr\">$unset</span>: { <span class=\"string\">'details.subject'</span>: <span class=\"number\">1</span> } }, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"复杂的操作\"><a href=\"#复杂的操作\" class=\"headerlink\" title=\"复杂的操作\"></a>复杂的操作</h3><figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">key</span>: [</span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">subkey</span>: value1,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">      <span class=\"attr\">subkey</span>: value2,</span><br><span class=\"line\">    },</span><br><span class=\"line\">  ];</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>若你只想删除 id 为 1 的的 subkey, 你可以使用如下命令:</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">example</span>.<span class=\"title function_\">update</span>(</span><br><span class=\"line\">  { <span class=\"string\">'key.id'</span>: <span class=\"number\">1</span> },</span><br><span class=\"line\">  { <span class=\"attr\">$unset</span>: { <span class=\"string\">'key.$.subkey'</span>: <span class=\"number\">1</span> } },</span><br><span class=\"line\">  <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"literal\">true</span>,</span><br><span class=\"line\">);</span><br></pre></td></tr></tbody></table></figure>\n","categories":["MongoDB"],"tags":["MongoDB","NoSQL"]},{"title":"PostgreSQL 配置","url":"/posts/201807/58460.html","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>创建 <code>pgdg.list</code> 编辑配置文件：</p>\n<pre><code>/etc/apt/sources.list.d/pgdg.list\n</code></pre>\n<p>添加如下内容：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main</span><br></pre></td></tr></tbody></table></figure>\n\n<p>导入存储库签名密钥，并更新包列表：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></tbody></table></figure>\n\n<p>安装：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">apt-get install postgresql-10</span><br></pre></td></tr></tbody></table></figure>\n\n<p>参见：<a href=\"https://www.postgresql.org/download/linux/ubuntu/\">LINUX DOWNLOADS (UBUNTU)</a></p>\n<span id=\"more\"></span>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"修改系统-postgres-用户的密码\"><a href=\"#修改系统-postgres-用户的密码\" class=\"headerlink\" title=\"修改系统 postgres 用户的密码\"></a>修改系统 postgres 用户的密码</h3><p>PostgreSQL 会创建一个默认的 linux 用户 postgres，修改该用户密码的方法如下：</p>\n<ol>\n<li>删除用户 <code>postgres</code> 的密码 </li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">sudo passwd -d postgres</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"2\">\n<li>设置用户 postgres 的密码 </li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">sudo -u postgres passwd</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"3\">\n<li>系统提示输入新的密码 </li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Enter new UNIX password:</span><br><span class=\"line\">Retype new UNIX password:</span><br><span class=\"line\">passwd: password updated successfully</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"修改数据库默认用户-postgres-的密码\"><a href=\"#修改数据库默认用户-postgres-的密码\" class=\"headerlink\" title=\"修改数据库默认用户 postgres 的密码\"></a>修改数据库默认用户 postgres 的密码</h3><p>PostgreSQL 数据库创建一个 postgres 用户作为数据库的管理员，密码随机，所以需要修改密码，方式如下：</p>\n<ol>\n<li>登录 PostgreSQL<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">sudo -u postgres psql</span><br></pre></td></tr></tbody></table></figure></li>\n<li>修改登录 PostgreSQL 密码 <figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> postgres <span class=\"keyword\">WITH</span> PASSWORD <span class=\"string\">'postgres'</span>;</span><br></pre></td></tr></tbody></table></figure>\n或 <figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">\\password postgres</span><br></pre></td></tr></tbody></table></figure>\n注：</li>\n<li>密码 postgres 要用引号引起来</li>\n<li>命令最后有分号 <code>;</code></li>\n</ol>\n<h2 id=\"用户、数据库\"><a href=\"#用户、数据库\" class=\"headerlink\" title=\"用户、数据库\"></a>用户、数据库</h2><p>进入系统 postgres 用户：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">sudo su - postgres</span><br></pre></td></tr></tbody></table></figure>\n<p>进入 PostgreSQL 命令行</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">psql</span><br></pre></td></tr></tbody></table></figure>\n<p>创建角色</p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> exampleUser <span class=\"keyword\">WITH</span> PASSWORD <span class=\"string\">'example-password'</span>;</span><br></pre></td></tr></tbody></table></figure>\n<p>创建数据库，并指定所有者：</p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database exampleDB owner exampleUser;</span><br></pre></td></tr></tbody></table></figure>\n<p>将 <code>exampleDB</code> 数据库的所有权限都赋予 <code>exampleUser</code>。</p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">ALL</span> PRIVILEGES <span class=\"keyword\">ON</span> DATABASE exampleDB <span class=\"keyword\">to</span> exampleUser;</span><br></pre></td></tr></tbody></table></figure>\n<p>上述命令还可以在 bash 中完成，便于自动化部署：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">sudo -u postgres createuser --superuser dbuser</span><br><span class=\"line\">sudo -u postgres createdb -O dbuser exampledb</span><br></pre></td></tr></tbody></table></figure>\n\n<p>参见：<a href=\"http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html\">PostgreSQL 新手入门</a></p>\n","categories":["PostgreSQL"],"tags":["Linux","PostgreSQL"]},{"title":"SQLite 中的自动索引","url":"/posts/202303/46209.html","content":"<h2 id=\"自动索引\"><a href=\"#自动索引\" class=\"headerlink\" title=\"自动索引\"></a>自动索引</h2><p>SQLite 会在一定情况下创建一个自动索引用于帮助提高一个查询的效率，官方文档说明如下：</p>\n<blockquote>\n<p><a href=\"https://www.sqlite.org/schematab.html\">https://www.sqlite.org/schematab.html</a><br>The sqlite_schema.name column will hold the name of the object. (<a href=\"https://www.sqlite.org/lang_createtable.html#uniqueconst\">UNIQUE</a> and <a href=\"https://www.sqlite.org/lang_createtable.html#primkeyconst\">PRIMARY KEY</a> constraints on tables cause SQLite to create <a href=\"https://www.sqlite.org/fileformat2.html#intschema\">internal indexes</a> with names of the form “sqlite_autoindex_TABLE_N” where TABLE is replaced by the name of the table that contains the constraint and N is an integer beginning with 1 and increasing by one with each constraint seen in the table definition. In a <a href=\"https://www.sqlite.org/withoutrowid.html\">WITHOUT ROWID</a> table, there is no sqlite_schema entry for the PRIMARY KEY, but the “sqlite_autoindex_TABLE_N” name is set aside for the PRIMARY KEY as if the sqlite_schema entry did exist. This will affect the numbering of subsequent UNIQUE constraints. The “sqlite_autoindex_TABLE_N” name is never allocated for an <a href=\"https://www.sqlite.org/lang_createtable.html#rowid\">INTEGER PRIMARY KEY</a>, either in rowid tables or WITHOUT ROWID tables.</p>\n</blockquote>\n<p>简单翻译一下：</p>\n<blockquote>\n<p><code>sqlite_schema.name</code> 列将保存对象的名称。(表上的 <code>UNIQUE</code> 和 <code>PRIMARY KEY</code> 约束会使 SQLite 创建内部索引，其名称形式为 <code>\"sqlite_autoindex_TABLE_N\"</code>，其中 <code>TABLE</code> 被包含约束的表的名称所取代，<code>N</code> 是一个从 <code>1</code> 开始的整数，在表定义中看到的每个约束都加 <code>1</code>。在一个 <code>WITHOUT ROWID</code> 表中，没有用于主键的 <code>sqlite_schema</code> 条目，但是 <code>\"sqlite_autoindex_TABLE_N\"</code> 名称被设置为主键，就好像 <code>sqlite_schema</code> 条目确实存在一样。这将影响后续 <code>UNIQUE</code> 约束的编号。<code>\"sqlite_autoindex_TABLE_N\"</code> 名称永远不会分配给一个 <code>[INTEGER PRIMARY KEY](https://www.sqlite.org/lang_createtable.html#rowid)</code>，无论是在 <code>rowid</code> 表中还是没有 <code>rowid</code> 表中。</p>\n</blockquote>\n<p>可以总结出来如下几条结论：</p>\n<ol>\n<li>表字段如果存在 <code>UNIQUE</code> 和 <code>PRIMARY KEY</code> 约束，那么 SQLite 会自动给字段创建 <code>\"sqlite_autoindex_TABLE_N\"</code> 索引；</li>\n<li>对于 <code>PRIMARY KEY</code> 约束，如果字段类型是 <code>INTEGER</code>，不会添加自动索引；</li>\n<li>在一个 <code>WITHOUT ROWID</code> 表中，主键的自动索引不会出现在 <code>sqlite_master</code> 表中 (可以在 <code>pragma_index_list('TABLE')</code> 中查看)。</li>\n</ol>\n<p>实际例子看一下，如果本地没有条件，在 <a href=\"https://sqliteonline.com/\">https://sqliteonline.com/</a> 可以在线直接执行查看效果。<br>先创建 <code>users</code> 和 <code>posts</code> 表：</p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> users</span><br><span class=\"line\">(</span><br><span class=\"line\">    id    <span class=\"type\">integer</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">primary</span> key autoincrement,</span><br><span class=\"line\">    email TEXT    <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> <span class=\"keyword\">unique</span>,</span><br><span class=\"line\">    name  TEXT</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> users_name_index</span><br><span class=\"line\">    <span class=\"keyword\">ON</span> users (name);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> posts</span><br><span class=\"line\">(</span><br><span class=\"line\">    title   TEXT <span class=\"keyword\">not</span> <span class=\"keyword\">null</span></span><br><span class=\"line\">        <span class=\"keyword\">primary</span> key,</span><br><span class=\"line\">    content TEXT</span><br><span class=\"line\">);</span><br></pre></td></tr></tbody></table></figure>\n<p>查看下索引情况：</p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> a.type, a.name, tbl_name, b.name <span class=\"keyword\">as</span> col_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> sqlite_master a, pragma_index_xinfo(a.name) b</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> type <span class=\"operator\">=</span> <span class=\"string\">'index'</span></span><br><span class=\"line\">  <span class=\"keyword\">and</span> b.name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>;</span><br></pre></td></tr></tbody></table></figure>\n<p>结果如下：</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>name</th>\n<th>tbl_name</th>\n<th>col_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>index</td>\n<td>sqlite_autoindex_users_1</td>\n<td>users</td>\n<td>email</td>\n</tr>\n<tr>\n<td>index</td>\n<td>users_name_index</td>\n<td>users</td>\n<td>name</td>\n</tr>\n<tr>\n<td>index</td>\n<td>sqlite_autoindex_posts_1</td>\n<td>posts</td>\n<td>title</td>\n</tr>\n</tbody></table>\n<p>可以看到 <code>users.id</code> 并没有创建自动索引，非 <code>integer</code> 类型的 <code>primary key</code> 约束和 <code>unique</code> 约束创建了自动索引。</p>\n<h2 id=\"WITHOUT-ROWID\"><a href=\"#WITHOUT-ROWID\" class=\"headerlink\" title=\"WITHOUT ROWID\"></a>WITHOUT ROWID</h2><p>再看 <code>WITHOUT ROWID</code> 情况，先创建表 <code>words</code>。</p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> words</span><br><span class=\"line\">(</span><br><span class=\"line\">    name TEXT <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    <span class=\"keyword\">desc</span> TEXT <span class=\"keyword\">UNIQUE</span></span><br><span class=\"line\">) <span class=\"keyword\">WITHOUT</span> ROWID;</span><br></pre></td></tr></tbody></table></figure>\n<p>查询 <code>sqlite_master</code> 表：</p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> sqlite_master <span class=\"keyword\">where</span> tbl_name<span class=\"operator\">=</span><span class=\"string\">'words'</span> <span class=\"keyword\">and</span> type<span class=\"operator\">=</span><span class=\"string\">'index'</span>;</span><br></pre></td></tr></tbody></table></figure>\n<p>结果为：</p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>name</th>\n<th>tbl_name</th>\n<th>rootpage</th>\n<th>sql</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>index</td>\n<td>sqlite_autoindex_words_2</td>\n<td>words</td>\n<td>9</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<p>表中自动索引序号是 <code>2</code>，并不是 <code>1</code>。接着查询：</p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> pragma_index_list(<span class=\"string\">'words'</span>);</span><br></pre></td></tr></tbody></table></figure>\n<p>结果为：</p>\n<table>\n<thead>\n<tr>\n<th>seq</th>\n<th>name</th>\n<th>unique</th>\n<th>origin</th>\n<th>partial</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>sqlite_autoindex_words_2</td>\n<td>1</td>\n<td>u</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>sqlite_autoindex_words_1</td>\n<td>1</td>\n<td>pk</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>注意 <code>orign</code> 字段，主键 <code>pk</code> 对应的是 <code>sqlite_autoindex_words_1</code>。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.sqlite.org/schematab.html\">The Schema Table</a></li>\n<li><a href=\"https://www.sqlite.org/pragma.html#pragma_index_info\">Pragma statements supported by SQLite</a></li>\n<li><a href=\"https://sqliteonline.com/\">https://sqliteonline.com/</a></li>\n</ul>\n","categories":["数据库"]},{"title":"用 Python 备份 PostgreSQL 数据库的 5 种方法","url":"/posts/201807/55646.html","content":"<p>本文翻译自：<a href=\"https://medium.com/poka-techblog/5-different-ways-to-backup-your-postgresql-database-using-python-3f06cea4f51\">5 different ways to backup your PostgreSQL database using Python</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>如果您正在为您的应用程序运行 PostgreSQL 数据库，则可能需要运行备份。</p>\n<p>Because good boys run backups. And you’re a good boy 🐶.</p>\n<p>现在，从 bash shell 备份 PostgreSQL 数据库非常简单。只需像这样调用 pg_dump：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">pg_dump -h localhost -U postgres my_database</span><br></pre></td></tr></tbody></table></figure>\n\n<p>您还需要压缩备份。 您可以通过压缩转储文件轻松节省大量磁盘空间：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">pg_dump -h localhost -U postgres my_database | gzip &gt; backup.gz</span><br></pre></td></tr></tbody></table></figure>\n\n<p>但是如何使用 Python 进行数据库备份呢？让我向您展示几种可以实现这一目标的方法。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"用-subprocess\"><a href=\"#用-subprocess\" class=\"headerlink\" title=\"用 subprocess\"></a>用 subprocess</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\"><span class=\"keyword\">with</span> gzip.<span class=\"built_in\">open</span>(<span class=\"string\">'backup.gz'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">  popen = subprocess.Popen(cmd, stdout=subprocess.PIPE, universal_newlines=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> stdout_line <span class=\"keyword\">in</span> <span class=\"built_in\">iter</span>(popen.stdout.readline, <span class=\"string\">\"\"</span>):</span><br><span class=\"line\">    f.write(stdout_line.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  popen.stdout.close()</span><br><span class=\"line\">  popen.wait()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>关于这个片段的一个好处就是你将逐行将 <code>pg_dump</code> 的输出写入 <code>backup.gz</code>。这意味着对于大型数据库，内存使用量将保持很小，因为您不会立即将整个转储装载到内存中。</p>\n<h2 id=\"用-sh\"><a href=\"#用-sh\" class=\"headerlink\" title=\"用 sh\"></a>用 sh</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">from</span> sh <span class=\"keyword\">import</span> pg_dump</span><br><span class=\"line\"><span class=\"keyword\">with</span> gzip.<span class=\"built_in\">open</span>(<span class=\"string\">'backup.gz'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">  pg_dump(<span class=\"string\">'-h'</span>, <span class=\"string\">'localhost'</span>, <span class=\"string\">'-U'</span>, <span class=\"string\">'postgres'</span>, <span class=\"string\">'my_dabatase'</span>, _out=f)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>看起来更干净，对吧？<a href=\"https://github.com/amoffat/sh\">sh</a> 是一个短小优雅的库，旨在使调用子进程更容易。如果你不介意依赖另一个第三方库，那么强烈推荐 <code>sh</code>。注意你如何导入 <code>pg_dump</code> 就像它是一个真正的 Python 模块一样。简直就是魔术。 就像使用 <code>subprocess</code> 的示例一样，您不会撑爆 RAM，因为 <code>pg_dump</code> 的输出将流式传输到 <code>backup.gz</code> 文件。</p>\n<h2 id=\"使用-delegator-py\"><a href=\"#使用-delegator-py\" class=\"headerlink\" title=\"使用 delegator.py\"></a>使用 delegator.py</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">import</span> delegator</span><br><span class=\"line\"><span class=\"keyword\">with</span> gzip.<span class=\"built_in\">open</span>(<span class=\"string\">'backup.gz'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">  c = delegator.run(<span class=\"string\">'pg_dump -h localhost -U postgres my_database'</span>)</span><br><span class=\"line\">  f.write(c.out.encode(<span class=\"string\">'utf-8'</span>))</span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://github.com/kennethreitz/delegator.py\">delegator.py</a> 是一个单独的模块，由 <code>requests</code> 的作者 <code>Kenneth Reitz</code> 创建。 上面的代码片段看起来没有 <code>sh</code> 示例那么魔术，你在写入压缩文件之前，您必须将字符串编码为字节。与 <code>subprocess</code> 或 <code>sh</code> 示例不同，此方法将随着数据库的增长逐渐使用更多内存，因此我只将其用于小型数据库。我没有找到任何方法来规避这个问题，所以如果你有敲门，请告诉我！</p>\n<h2 id=\"使用-pexpect\"><a href=\"#使用-pexpect\" class=\"headerlink\" title=\"使用 pexpect\"></a>使用 pexpect</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">import</span> pexpect</span><br><span class=\"line\"><span class=\"keyword\">with</span> gzip.<span class=\"built_in\">open</span>(<span class=\"string\">'backup.gz'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">  c = pexpect.spawn(<span class=\"string\">'pg_dump -h localhost -U postgres my_database'</span>)</span><br><span class=\"line\">  f.write(c.read())</span><br></pre></td></tr></tbody></table></figure>\n\n<p>做了一些关于子过程替代的研究，我偶然发现了 <a href=\"https://github.com/pexpect/pexpect\">pexpect</a>。由于它看起来是一个非常受欢迎的库，我无法跳过它。我喜欢这段代码–直截了当。在写入 gzip 文件之前，无需编码字符串！就像 <code>delegator.py</code> 示例一样，如果你不小心的话，这段代码可能会破坏你的内存使用量。当然，代码也非常干净，所以我加上了这段代码！</p>\n<h2 id=\"使用-plumbum\"><a href=\"#使用-plumbum\" class=\"headerlink\" title=\"使用 plumbum\"></a>使用 plumbum</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">from</span> plumbum.cmd <span class=\"keyword\">import</span> pg_dump</span><br><span class=\"line\"><span class=\"keyword\">with</span> gzip.<span class=\"built_in\">open</span>(<span class=\"string\">'backup.gz'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">   (pg_dump[<span class=\"string\">\"-h\"</span>, <span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"-U\"</span>, <span class=\"string\">\"postgres\"</span>, <span class=\"string\">\"my_database\"</span>] &gt; f)()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>魔术重载！ 我喜欢这个代码片段使用 <code>&gt;</code> 运算符来模仿 bash 中 IO 重定向的行为。这个库有许多使用管道运算符进行 IO 重定向的<a href=\"https://plumbum.readthedocs.io/en/latest/\">好例子</a>。与前面的 2 个示例一样，此方法不会逐渐将转储流式传输到 gzip 压缩文件，因此仅适用于较小的数据库。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我向您展示了使用 python 调用 <code>pg_dump</code> 的 5 种不同的方式。如果您不想安装另一个第三方库，或者 “魔术” 让您感到害怕，那么 <code>subprocess</code> 示例绝对是您的选择。 然而，<code>sh</code> 示例更容易理解，并且在内存使用方面表现良好。对于生产用途，我会避开最后 3 个例子，因为它们往往会占用大量内存。此外，由于您是一个好的 🐕，请务必测试您的备份恢复程序！</p>\n","categories":["PostgreSQL"],"tags":["Python","PostgreSQL","备份"]}]